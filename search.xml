<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Fedora安装后的配置</title>
      <link href="/2020/02/28/Fedora%E5%AE%89%E8%A3%85%E5%90%8E%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/02/28/Fedora%E5%AE%89%E8%A3%85%E5%90%8E%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>摘要：在Fedora系统安装后还需要一些配置才能正常使用。</p><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> Fedora </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fedora </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-Fedora系统的安装</title>
      <link href="/2020/02/26/Linux-Fedora%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AE%89%E8%A3%85/"/>
      <url>/2020/02/26/Linux-Fedora%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>摘要：这是一次在Linux课程上的安装尝试，安装的是Fedora系统。在下一篇我会更新手动换源和一键换源的步骤。</p><a id="more"></a><h2 id="下载镜像文件"><a href="#下载镜像文件" class="headerlink" title="下载镜像文件"></a>下载镜像文件</h2><ol><li><p>首先我们先去<a href="http://mirrors.ustc.edu.cn/" target="_blank" rel="noopener">mirrors.ustc.edu.cn</a>下载fedora的镜像文件</p></li><li><p>点击右侧的<font color="red"><strong>获取安装镜像</strong></font>在发行版的下拉列表中找到到Fedora</p></li><li><p>选择发行版本中会列出最新的版本号以及各版本号所对应的不同选项。版本一致的情况下内核和功能都是一样的，区别在于<strong>图形界面</strong>，这里我选择31（×86-64Cinnamon）这个版本。</p><p>①workstation就是标准的图形界面。</p><p>②Xfce是极简界面，一般用于比较老或者性能不佳的机器。</p><p>③KDE更倾向于Windows的界面。</p><p>④Cinnamon则比较流行的图像界面。</p></li></ol><h2 id="VM虚拟机安装Linux系统"><a href="#VM虚拟机安装Linux系统" class="headerlink" title="VM虚拟机安装Linux系统"></a>VM虚拟机安装Linux系统</h2><ol><li>选择新建虚拟机，选择自定义，在硬件兼容性的选项中选择最高版本即可，因为高版本默认是兼容低版本的虚拟机的，但是低版本不能兼容高版本，所以选择较高的即可。</li><li>安装客户机OS时选择稍后安装，我们先把虚拟机配置好再进行系统安装。</li><li>客户机操作系统选择Linux ，根据下载的版本选择Fedora 是32位还是64位即可。（ps：如果你安装的虚拟机版本不在这上面可以使用最下面的内核版本来进行安装）</li><li>选择虚拟机文件存放的安装目录。</li><li>选择2核4线程即可</li><li>指定虚拟机内存，因为是64位虚拟机至少2G内存才不会太卡顿，若内存富裕可以选择4GB内存。</li><li>网络连接方式其中有四个选项，一般情况下我们选择NAT模式或者仅主机模式。其中，NAT模式的特点是虚拟机可以同步使用主机IP地址来访问互联网，但是虚拟机和主机是不可以通信的。反之，在仅主机模式中虚拟机是不能访问互联网的，但是客户机和主机是可以进行通信的，一般在进行虚拟网络测试时选择的是仅主机模式。</li><li>I/O控制器选择默认即可。</li><li>虚拟硬盘类型默认即可。</li><li>在是否创建虚拟磁盘，一般情况下创建虚拟磁盘。</li><li>选择磁盘大小，记得不要超过你的磁盘大小。其中需要注意的是<font color="red">立即分配所以磁盘空间</font>是将磁盘立即划分出来，之后就不能使用你所选择的这部分空间，所以一般不打勾。而将虚拟盘拆分多个文件有利于虚拟机的转移。</li><li>然后一直下一步即可完成。</li></ol><h2 id="安装操作系统"><a href="#安装操作系统" class="headerlink" title="安装操作系统"></a>安装操作系统</h2><ol><li>点击虚拟机界面下的<font color="red">编辑此虚拟机设置</font>在其中的CD/DVD中选择使用ISO映像文件，选择你下载的镜像包然后保存。</li><li>启动虚拟机进行安装。</li><li>选择START FEDORA进行下一步，安装的开始会进行一些初始化。</li><li>此时会出现主界面，不过是试用界面，可以点击Install to Hard Drive 进行安装到硬盘中。</li><li>安装的第一就是选择中文。</li><li>安装信息摘要中，凡是带感叹号的都是需要 用户修改的。</li><li>按照步骤安装即可。注意!由于目前的操作系统不允许超级用户登入，所以必须创建用户用于登入。<u>不要</u>选择将用户设置为管理员。</li><li>创建完成后单击开始安装。</li><li>最后重启系统即可完成。</li></ol><p><font color="red">注意：最好将网络断开，避免在未换源的情况下由于下载更新导致安装过慢的问题</font></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Fedora </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fedora </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统——缺页中断及页面置换算法</title>
      <link href="/2019/12/08/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E7%BC%BA%E9%A1%B5%E4%B8%AD%E6%96%AD%E5%8F%8A%E9%A1%B5%E9%9D%A2%E7%BD%AE%E6%8D%A2%E7%AE%97%E6%B3%95/"/>
      <url>/2019/12/08/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E7%BC%BA%E9%A1%B5%E4%B8%AD%E6%96%AD%E5%8F%8A%E9%A1%B5%E9%9D%A2%E7%BD%AE%E6%8D%A2%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>摘要：在这里将缺页中断进行简单的描述和页面置换算法的题目进行分析和记录，以供参考。</p><a id="more"></a><h2 id="缺页中断"><a href="#缺页中断" class="headerlink" title="缺页中断"></a><strong>缺页中断</strong></h2><p>​        在请求分页系统中，可以通过查询页表中的状态位来确定所要访问的页面是否存在于内存中。每当所要访问的页面不在内存时，会产生一次缺页中断，此时操作系统会根据页表中的外存地址在外存中找到所缺的一页，将其调入内存。<br>　　缺页本身是一种中断，与一般的中断一样，需要经过4个处理步骤： </p><ol><li><p>保护CPU现场 </p></li><li><p>分析中断原因 </p></li><li><p>转入缺页中断处理程序进行处理 </p></li><li><p>恢复CPU现场，继续执行</p><p>但是缺页中断时由于所要访问的页面不存在与内存时，有硬件所产生的一种特殊的中断，因此，</p></li></ol><p>　　<div class="note warning">与一般的中断存在<strong>区别</strong>:</div></p><ol start="5"><li><p>在指令执行期间产生和处理缺页中断信号 </p></li><li><p>一条指令在执行期间，可能产生多次缺页中断 </p></li><li><p>缺页中断返回时，执行产生中断的那一条指令，而一般的中断返回时，执行下一条指令</p></li></ol><h2 id="页面置换算法"><a href="#页面置换算法" class="headerlink" title="页面置换算法"></a><strong>页面置换算法</strong></h2><h3 id="最佳置换算法（Optimal-OPT）"><a href="#最佳置换算法（Optimal-OPT）" class="headerlink" title="最佳置换算法（Optimal,OPT）"></a>最佳置换算法（Optimal,OPT）</h3><ol><li><p>基本思想</p><p>​        置换以后不再访问，或者在将来最迟才会被访问的页面，缺页中断率最低。但是该算法需要依据以后各页的使用情况，而当一个进程还未完成的时候，很难估计哪个页面是以后不再使用或者最长时间以后才会用到的页面。所以该算法是不能实现的。但还算法任然具有意义，作为衡量其他算法优劣的一个标准。</p></li><li><p>算例</p><p>​        采用固定分配局部置换的策略，嘉定系统为某进程在内存中分配了3个物理块，页面访问顺序为2、3、2、1、5、2、4、5、3、2、5、2。假定系统未采用<strong>预调页策略</strong>，即未事先调入任何页面。进程运行时，一次将2、3、1三个页面调入内存，发生3次缺页中断。当第一次访问页面5时，产生第4次缺页中断，根据OPT算法，淘汰页面1，因为它在以后不会在使用了；第5次缺页中断时，淘汰页面2，因为它在5、3、2三个页面中，是在将来最迟才会被页面访问的页面。以此类推：<br>　　注意：第4次中断时将最后不会访问的1剔除，将最后才访问的3放入最下面的内存块中，以后的调度过程中，最后不会访问或最后才被访问的页面总是放在最下面的内存块中。内存块从上到下依次存放最先访问的页面。<br>　　中断次数为6，缺页中断率为6/12*100% = 50%。</p></li></ol><table><thead><tr><th align="center">P:</th><th align="center">2</th><th align="center">3</th><th align="center">2</th><th align="center">1</th><th align="center">5</th><th align="center">2</th><th align="center">4</th><th align="center">5</th><th align="center">3</th><th align="center">2</th><th align="center">5</th><th align="center">2</th></tr></thead><tbody><tr><td align="center">M=3</td><td align="center">2</td><td align="center">2</td><td align="center">2</td><td align="center">2</td><td align="center">2</td><td align="center">2</td><td align="center">4</td><td align="center">4</td><td align="center">4</td><td align="center">4</td><td align="center">4</td><td align="center">4</td></tr><tr><td align="center"></td><td align="center"></td><td align="center">3</td><td align="center">3</td><td align="center">3</td><td align="center">3</td><td align="center">3</td><td align="center">3</td><td align="center">3</td><td align="center">3</td><td align="center">2</td><td align="center">2</td><td align="center">2</td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">1</td><td align="center">5</td><td align="center">5</td><td align="center">5</td><td align="center">5</td><td align="center">5</td><td align="center">5</td><td align="center">5</td><td align="center">5</td></tr><tr><td align="center">F=6</td><td align="center">Y</td><td align="center">Y</td><td align="center"></td><td align="center">Y</td><td align="center">Y</td><td align="center"></td><td align="center">Y</td><td align="center"></td><td align="center"></td><td align="center">Y</td><td align="center"></td><td align="center"></td></tr></tbody></table><h3 id="先进先出置换算法（First-In-First-Out-FIFO"><a href="#先进先出置换算法（First-In-First-Out-FIFO" class="headerlink" title="先进先出置换算法（First In First Out, FIFO)"></a>先进先出置换算法（First In First Out, FIFO)</h3><ol><li><p>基本思想</p><p>​        置换最先调入内存的页面，即置换在内存中驻留时间最久的页面。按照进入内存的先后次序排列成<strong>队列</strong>，从队尾进入，从队首删除。但是该算法会淘汰经常访问的页面，不适应进程实际运行的规律，目前已经<strong>很少使用</strong>。</p></li><li><p>算例</p><p>​        中断次数为6，缺页中断率为9/12*100% = 75%。</p><table><thead><tr><th align="center">P:</th><th align="center">2</th><th align="center">3</th><th align="center">2</th><th align="center">1</th><th align="center">5</th><th align="center">2</th><th align="center">4</th><th align="center">5</th><th align="center">3</th><th align="center">2</th><th align="center">5</th><th align="center">2</th></tr></thead><tbody><tr><td align="center">M=3</td><td align="center">2</td><td align="center">2</td><td align="center">2</td><td align="center">2</td><td align="center">5</td><td align="center">5</td><td align="center">5</td><td align="center">5</td><td align="center">3</td><td align="center">3</td><td align="center">3</td><td align="center">3</td></tr><tr><td align="center"></td><td align="center"></td><td align="center">3</td><td align="center">3</td><td align="center">3</td><td align="center">3</td><td align="center">2</td><td align="center">2</td><td align="center">2</td><td align="center">2</td><td align="center">2</td><td align="center">5</td><td align="center">5</td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">4</td><td align="center">4</td><td align="center">4</td><td align="center">4</td><td align="center">4</td><td align="center">2</td></tr><tr><td align="center">F=9</td><td align="center">Y</td><td align="center">Y</td><td align="center"></td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td><td align="center"></td><td align="center">Y</td><td align="center">Y</td><td align="center"></td><td align="center">Y</td></tr></tbody></table></li><li><p>Belady异常</p><p>​        一般来说，分配给进程的物理块越多，运行时的缺页次数应该越少，使用FIFO时，可能存在相反情况，分配4个物理块的缺页竟然比3个物理块的缺页次数还多！<br>​        例如：进程访问顺序为0、2、1、3、0、2、4、0、2、1、3、4。 </p><p>M=3时，缺页中断9次。缺页中断率9/12*100% = 75%。</p></li></ol><table><thead><tr><th align="center">P:</th><th align="center">0</th><th align="center">2</th><th align="center">1</th><th align="center">3</th><th align="center">0</th><th align="center">2</th><th align="center">4</th><th align="center">0</th><th align="center">2</th><th align="center">1</th><th align="center">3</th><th align="center">4</th></tr></thead><tbody><tr><td align="center">M=3</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">3</td><td align="center">3</td><td align="center">3</td><td align="center">4</td><td align="center">4</td><td align="center">4</td><td align="center">4</td><td align="center">4</td><td align="center">4</td></tr><tr><td align="center"></td><td align="center"></td><td align="center">2</td><td align="center">2</td><td align="center">2</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">1</td><td align="center">1</td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">2</td><td align="center">2</td><td align="center">2</td><td align="center">2</td><td align="center">2</td><td align="center">3</td><td align="center">3</td></tr><tr><td align="center">F=9</td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td><td align="center"></td><td align="center"></td><td align="center">Y</td><td align="center">Y</td><td align="center"></td></tr></tbody></table><p>​        Ｍ=4时，缺页中断10次。缺页中断率10/12*100% = 83.3%。</p><table><thead><tr><th align="center">P:</th><th align="center">0</th><th align="center">2</th><th align="center">1</th><th align="center">3</th><th align="center">0</th><th align="center">2</th><th align="center">4</th><th align="center">0</th><th align="center">2</th><th align="center">1</th><th align="center">3</th><th align="center">4</th></tr></thead><tbody><tr><td align="center">M=4</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">4</td><td align="center">4</td><td align="center">4</td><td align="center">4</td><td align="center">3</td><td align="center">3</td></tr><tr><td align="center"></td><td align="center"></td><td align="center">2</td><td align="center">2</td><td align="center">2</td><td align="center">2</td><td align="center">2</td><td align="center">2</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">4</td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">2</td><td align="center">2</td><td align="center">2</td><td align="center">2</td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">3</td><td align="center">3</td><td align="center">3</td><td align="center">3</td><td align="center">3</td><td align="center">3</td><td align="center">1</td><td align="center">1</td><td align="center">1</td></tr><tr><td align="center">F=10</td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td><td align="center"></td><td align="center"></td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td></tr></tbody></table><h3 id="最近最久未使用置换算法（Least-Recently-Used，-LRU）"><a href="#最近最久未使用置换算法（Least-Recently-Used，-LRU）" class="headerlink" title="最近最久未使用置换算法（Least Recently Used， LRU）"></a>最近最久未使用置换算法（Least Recently Used， LRU）</h3><ol><li><p>基本思想</p><p>​        置换最近一段时间以来最长时间未访问过的页面。根据程序局部性原理，刚被访问的页面，可能马上又要被访问；而较长时间内没有被访问的页面，可能最近不会被访问。<br>　　LRU算法普偏地适用于各种类型的程序，但是系统要时时刻刻对各页的访问历史情况加以记录和更新，开销太大，因此LRU算法必须要有硬件的支持。</p></li><li><p>算例</p><p>​        仍然以OPT算例为例子。<br>　　中断次数为6，缺页中断率为7/12*100% = 58.3%。</p><table><thead><tr><th align="center">P:</th><th align="center">2</th><th align="center">3</th><th align="center">2</th><th align="center">1</th><th align="center">5</th><th align="center">2</th><th align="center">4</th><th align="center">5</th><th align="center">3</th><th align="center">2</th><th align="center">5</th><th align="center">2</th></tr></thead><tbody><tr><td align="center">M=3</td><td align="center">2</td><td align="center">2</td><td align="center">2</td><td align="center">2</td><td align="center">5</td><td align="center">5</td><td align="center">5</td><td align="center">5</td><td align="center">5</td><td align="center">5</td><td align="center">5</td><td align="center">5</td></tr><tr><td align="center"></td><td align="center"></td><td align="center">3</td><td align="center">3</td><td align="center">3</td><td align="center">2</td><td align="center">2</td><td align="center">2</td><td align="center">2</td><td align="center">3</td><td align="center">3</td><td align="center">3</td><td align="center">3</td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">4</td><td align="center">4</td><td align="center">4</td><td align="center">2</td><td align="center">2</td><td align="center">2</td></tr><tr><td align="center">F=7</td><td align="center">Y</td><td align="center">Y</td><td align="center"></td><td align="center">Y</td><td align="center">Y</td><td align="center"></td><td align="center">Y</td><td align="center"></td><td align="center">Y</td><td align="center">Y</td><td align="center"></td><td align="center"></td></tr></tbody></table></li></ol>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
            <tag> 中断 </tag>
            
            <tag> 页面置换算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统——几种常见的调度算法</title>
      <link href="/2019/12/07/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%9A%84%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/"/>
      <url>/2019/12/07/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%9A%84%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>摘要：总结一下在操作系统学习中遇到的几种常见的调度算法，以供参考。</p><a id="more"></a><h2 id="处理机调度相关基本概念"><a href="#处理机调度相关基本概念" class="headerlink" title="处理机调度相关基本概念"></a>处理机调度相关基本概念</h2><h3 id="调度方式和调度算法的若干准则"><a href="#调度方式和调度算法的若干准则" class="headerlink" title="调度方式和调度算法的若干准则"></a>调度方式和调度算法的若干准则</h3><p>1.面向用户的准则：周转时间短（CPU执行用时Ts、周转时间T=Ts+Tw、带权周转时间W= T/Ts）、响应时间快、均衡性、截止时间的保证、优先权准则。</p><p>2.面向系统的准则：系统吞吐量高、处理机利用率好、各类资源的平衡利用</p><p>3.批处理系统为照顾为数众多的短作业，应采用短作业优先的调度算法；分时系统为保证系统具有合理的响应时间，应采用轮转法进行调度</p><h2 id="常用调度算法"><a href="#常用调度算法" class="headerlink" title="常用调度算法"></a>常用调度算法</h2><h3 id="先来先服务调度算法FCFS"><a href="#先来先服务调度算法FCFS" class="headerlink" title="先来先服务调度算法FCFS"></a><strong>先来先服务调度算法FCFS</strong></h3><p>1.按照作业提交，或进程变为就绪状态的先后次序分派CPU。</p><p>2.新作业只有当当前作业或进程执行完或阻塞才获得CPU运行。</p><p>3.被唤醒的作业或进程不立即恢复执行，通常等到当前作业或进程出让CPU（所以，默认即是非抢占方式）。</p><p>4.有利于CPU繁忙型的作业，而不利于I/O繁忙的作业（进程）。</p><img src="https://blog-1251459134.cos.ap-guangzhou.myqcloud.com/operating%20system/FCFS.png"><h3 id="短作业（进程）优先调度算法SJF（非抢占）-SPF（抢占）"><a href="#短作业（进程）优先调度算法SJF（非抢占）-SPF（抢占）" class="headerlink" title="短作业（进程）优先调度算法SJF（非抢占）/SPF（抢占）"></a><strong>短作业（进程）优先调度算法SJF（非抢占）/SPF（抢占）</strong></h3><p>1.平均周转时间、平均带权周转时间都有明显改善。SJF/SPF调度算法能有效的降低作业的平均等待时间，提高系统吞吐量。</p><p>2.未考虑作业的紧迫程度，因而不能保证紧迫性作业（进程）的及时处理、对长作业的不利、作业（进程）的长短含主观因素，不一定能真正做到短作业优先。</p><img src="https://blog-1251459134.cos.ap-guangzhou.myqcloud.com/operating%20system/SJF_SPF.png"><h3 id="高优先权优先调度算法HPF"><a href="#高优先权优先调度算法HPF" class="headerlink" title="高优先权优先调度算法HPF"></a>高优先权优先调度算法HPF</h3><p>1.<strong>两种方式</strong>：非抢占式优先权算法、抢占式优先权算法（关键点：新作业产生时）<br>2.<strong>类型</strong>:静态优先权：创建进程时确定，整个运行期间保持不变。动态优先权：创建进程时赋予的优先权可随进程的推进或随其等待时间的增加而改变。</p><p>最具有代表性的就是<strong>高响应比优先调度算法HRRN</strong>：</p><p>HRRN为每个作业引入动态优先权，使作业的优先级随着等待时间的增加而以速率a提高：优先权 =（等待时间+要求服务时间)/要求服务时间= 响应时间 / 要求服务时间。<br>什么时候计算各进程的响应比优先权？（作业完成时、新作业产生时（抢占、非抢占）、时间片完成时、进程阻塞时）</p><img src="https://blog-1251459134.cos.ap-guangzhou.myqcloud.com/operating%20system/HRNN.png"><h3 id="基于时间片的轮转调度算法RR"><a href="#基于时间片的轮转调度算法RR" class="headerlink" title="基于时间片的轮转调度算法RR"></a><strong>基于时间片的轮转调度算法RR</strong></h3><h3 id="时间片轮转算法"><a href="#时间片轮转算法" class="headerlink" title="时间片轮转算法"></a>时间片轮转算法</h3><p>过程：</p><p>1.排成一个队列。</p><p>2.每次调度时将CPU分派给队首进程。</p><p>3.时间片结束时，发生时钟中断。</p><p>4.暂停当前进程的执行，将其送到就绪队列的末尾，并通过上下文切换执行当前就绪的队首进程。<br>说明：</p><p>1.进程阻塞情况发生时，未用完时间片也要出让CPU。</p><p>2.能够及时响应，但没有考虑作业长短等问题。</p><p>3.系统的处理能力和系统的负载状态影响时间片长度。</p><h3 id="多级反馈队列算法FB"><a href="#多级反馈队列算法FB" class="headerlink" title="多级反馈队列算法FB"></a><strong>多级反馈队列算法FB</strong></h3><p>过程：</p><p>1.准备调度：先将它放入第一个队列的末尾，按FCFS原则排队等待调度。</p><p>2.IF时间片内完成，便可准备撤离系统。</p><p>3.IF时间片内未能完成，调度程序便将该进程转入第二队列的末尾等待再次被调度执行。</p><p>4.当第一队列中的进程都执行完，系统再按FCFS原则调度第二队列。在第二队列的稍放长些的时间片内仍未完成，再依次将它放入第三队列。</p><p>5.依次降到第n队列后，在第n队列中便采取按时间片轮转的方式运行。</p> <img src="https://blog-1251459134.cos.ap-guangzhou.myqcloud.com/operating%20system/FB.png"><p>说明:</p><p>1.设置多个就绪队列，各队列有不同的优先级,优先级从第一个队列依次降低。</p><p>2.赋予各队列进程执行时间片大小不同, 优先权越高，时间片越短。</p><p>3.仅当优先权高的队列（如第一队列）空闲时，调度程序才调度第二队列中的进程运行。</p><p>4.高优先级抢占时，被抢占的进程放回原就绪队列末尾。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><img src="https://blog-1251459134.cos.ap-guangzhou.myqcloud.com/operating%20system/summary.png">]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
            <tag> 调度算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客添加相册页面</title>
      <link href="/2019/12/01/Hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E7%9B%B8%E5%86%8C%E9%A1%B5%E9%9D%A2/"/>
      <url>/2019/12/01/Hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E7%9B%B8%E5%86%8C%E9%A1%B5%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>摘要：Hexo 博客并没有自带的相册功能，所以我们需要自己动手来创建一个相册，其中修改了一些原作者的问题。</p><a id="more"></a><p>我的<a href="https://hongcyu.coding.me/photos/" target="_blank" rel="noopener">个人相册</a>目前不适配低分辨率，建议在 1920*1080 及以上访问效果最好哦，需要自己进行适配的，可以在我的代码基础上自行进行修改~</p><h2 id="创建腾讯云存储桶（cos）"><a href="#创建腾讯云存储桶（cos）" class="headerlink" title="创建腾讯云存储桶（cos）"></a>创建腾讯云存储桶（cos）</h2><p>跳转：「<a href="https://cloud.tencent.com/" target="_blank" rel="noopener">腾讯云</a>」–&gt;产品（左上角）–&gt;存储–&gt;对象存储</p><p>我们先新建一个专门存放相册图片的存储桶，在<font color="red">对象存储</font>页面左边点击存储桶列表 -&gt; 新建存储桶</p><p>然后在存储桶页面，名称可以自己任意填写，需要选择下图中标注的<font color="red">公有读私有写</font>，然后点击确定。</p><img src="https://blog-1251459134.cos.ap-guangzhou.myqcloud.com/Album%20function/2.png"><hr><p>然后我们点击这个存储桶，选择左侧的基础配置 -&gt; 跨域访问CORS设置 -&gt; 添加规则</p><img src="https://blog-1251459134.cos.ap-guangzhou.myqcloud.com/Album%20function/3.png"><p>然后按下图所示进行填写</p><img src="https://blog-1251459134.cos.ap-guangzhou.myqcloud.com/Album%20function/4.png"><p><strong>域名以 http://或 https:// 开头，每行一个，一行最多一个通配符 *</strong></p><p><strong>如果填写域名后遇到跨域问题，可以将 origin 这里填写为 * 就可以解决</strong></p><hr><p>点击权限管理–&gt;Policy权限设置–&gt;添加策略</p><img src="https://blog-1251459134.cos.ap-guangzhou.myqcloud.com/Album%20function/6.png"><p>按照下面图片进行设置</p><img src="https://blog-1251459134.cos.ap-guangzhou.myqcloud.com/Album%20function/1.png"><hr><p>然后记住基础配置中的<font color="red">访问域名</font>，这里就是我们动态生成相册，获取链接时需要用到的<font color="red">xml链接</font>，下面要用到。</p><img src="https://blog-1251459134.cos.ap-guangzhou.myqcloud.com/Album%20function/5.png"><h2 id="新建相册页面"><a href="#新建相册页面" class="headerlink" title="新建相册页面"></a>新建相册页面</h2><p>首先在 hexo 博客本地新建一个页面（菜单栏）：</p><p>hexo博客根站点目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &quot;photos&quot;</span><br></pre></td></tr></table></figure><p>然后在<code>hexo/source/photos/index.md</code>中编辑页面如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 光影流年</span><br><span class="line">date: 2019-12-05 13:00:00</span><br><span class="line">type: &quot;photos&quot;</span><br><span class="line">---</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">.posts-expand .post-body img&#123;</span><br><span class="line">padding: 1px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.footer&#123;</span><br><span class="line">display: none !important;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> /*不展示底部*/</span><br><span class="line"> .footer-inner&#123;</span><br><span class="line"> display: none !important;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">.v * &#123;</span><br><span class="line">    color: #f4f4f4 !important;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.v .vwrap .vmark .valert .vcode &#123;</span><br><span class="line">    background: #00050b !important;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> /*不展示侧栏*/</span><br><span class="line"> .sidebar-toggle&#123;</span><br><span class="line"> display: none !important;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">    /*修改相册页面内容宽度为全屏*/</span><br><span class="line">.main-inner&#123;</span><br><span class="line">width: 100%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*修改主体页面样式*/</span><br><span class="line">.main &#123;</span><br><span class="line">    padding-bottom: 150px;</span><br><span class="line">    margin-top: 0px;</span><br><span class="line">    background: #121212;</span><br><span class="line">&#125;</span><br><span class="line">.main-inner&#123;</span><br><span class="line">margin-top: unset;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*body体样式*/</span><br><span class="line">body &#123;</span><br><span class="line">background-image: unset;</span><br><span class="line">background-attachment: unset;</span><br><span class="line">background-size: 100%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.header&#123;</span><br><span class="line">background: rgba(28, 25, 25, 0.6);</span><br><span class="line">border-bottom: unset;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.menu .menu-item a&#123;</span><br><span class="line">font-weight: 300;</span><br><span class="line">   color: #222;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    .imgbox&#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">  border-right: 0px solid #bcbcbc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">.box&#123;</span><br><span class="line">visibility: visible;</span><br><span class="line">overflow: auto; </span><br><span class="line">zoom: 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.box li&#123;</span><br><span class="line">float: left;</span><br><span class="line">    width: 25%;  /*每个框占25%*/</span><br><span class="line">    position: relative;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    text-align: center;</span><br><span class="line">    list-style: none;</span><br><span class="line">    margin: 0;</span><br><span class="line">    /*display: inline;*/</span><br><span class="line">    padding: 0;</span><br><span class="line">    height: 400px;   /*固定高度*/</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.box li span&#123;</span><br><span class="line">display: block;</span><br><span class="line">    padding: 4% 7% 10% 7%;</span><br><span class="line">    min-height: 80px;</span><br><span class="line">    background: #fff;</span><br><span class="line">    color: #fff;</span><br><span class="line">    font-size: 16px;</span><br><span class="line">    background: #121212;</span><br><span class="line">    font-weight: 600;</span><br><span class="line">    line-height: 26px;</span><br><span class="line">    -webkit-box-sizing: border-box;</span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    img.imgitem&#123;</span><br><span class="line">padding: unset;</span><br><span class="line">padding: unset;</span><br><span class="line">border: unset;</span><br><span class="line">position: relative;</span><br><span class="line">padding: 0px;</span><br><span class="line">width: 100%;</span><br><span class="line">height: 350px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">div#comments.comments.v &#123;</span><br><span class="line">    border: 0px;</span><br><span class="line">    margin: auto !important;</span><br><span class="line">    margin-top: unset;</span><br><span class="line">    margin-left: unset;</span><br><span class="line">    margin-right: unset;</span><br><span class="line">    width: 60%;</span><br><span class="line">    padding-top: 50px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">div#posts.posts-expand &#123;</span><br><span class="line">    border: unset;</span><br><span class="line">    padding: unset;</span><br><span class="line">    margin-bottom: 10px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.valine .vlist .vcard .vcomment-body .vhead .vname&#123;</span><br><span class="line">color: #fff;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.valine .vlist .vcard .vcomment-body .text-wrapper .vcomment p&#123;</span><br><span class="line">color: #fff;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.box p&#123;</span><br><span class="line">display: block;</span><br><span class="line">    background: #121212;</span><br><span class="line">    color: #fff;</span><br><span class="line">    font-size: 12px;</span><br><span class="line">    font-family: &apos;SwisMedium&apos;;</span><br><span class="line">    text-align: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.box span strong&#123;</span><br><span class="line">background: rgba(0,0,0,0.4);</span><br><span class="line">padding: 20px;</span><br><span class="line">font-family: serif, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.posts-expand .post-title &#123;</span><br><span class="line">display: none;</span><br><span class="line">&#125;</span><br><span class="line">.title&#123;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line">    font: 85px/250px &apos;ChaletComprimeMilanSixty&apos;;</span><br><span class="line">    background-position: left bottom !important;</span><br><span class="line">    color: #fff;</span><br><span class="line">    background-size: 100% auto !important; </span><br><span class="line">-webkit-background-size: cover; </span><br><span class="line">-moz-background-size: cover;</span><br><span class="line">-o-background-size: cover;</span><br><span class="line">    width: 100%;</span><br><span class="line">    text-align: center;</span><br><span class="line">    border: unset;</span><br><span class="line">    height: 580px;</span><br><span class="line">    cursor: unset !important;</span><br><span class="line">    -webkit-box-sizing: border-box;</span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">&#125;</span><br><span class="line">.btn-more-posts&#123;</span><br><span class="line">display: inline-block;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line">    font: 85px/250px &apos;ChaletComprimeMilanSixty&apos;;</span><br><span class="line">    color: #000;</span><br><span class="line">    width: 100%;</span><br><span class="line">    text-align: center;</span><br><span class="line">    border: unset;</span><br><span class="line">    height: 400px;</span><br><span class="line">    background-color: #121212;</span><br><span class="line">    /*-webkit-box-sizing: border-box;*/</span><br><span class="line">    /*box-sizing: border-box;*/</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@media (max-width: 767px)&#123;</span><br><span class="line">.box li &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: auto;</span><br><span class="line">&#125;</span><br><span class="line">.title &#123;</span><br><span class="line">    height: 200px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.posts-expand .post-body img&#123;</span><br><span class="line">box-sizing: none;</span><br><span class="line">padding: 0px !important;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.box span &#123;</span><br><span class="line">    min-height: 80px;</span><br><span class="line">    border-right: unset;</span><br><span class="line">    font-size: 17px;</span><br><span class="line">&#125;</span><br><span class="line">.box p&#123;</span><br><span class="line">    border-right: unset;</span><br><span class="line">    font-size: 12px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.posts-expand &#123;</span><br><span class="line">    margin: unset;</span><br><span class="line">&#125;</span><br><span class="line">div#comments.comments.v &#123;</span><br><span class="line">    width: 96%;</span><br><span class="line">    padding-top: 50px;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@media (min-width: 1300px)&#123;</span><br><span class="line">.container .main-inner&#123;</span><br><span class="line">width: 100%;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 主体部分 --&gt;</span><br><span class="line">&lt;div id=&quot;box&quot; class=&quot;box&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"></span><br><span class="line">function loadXMLDoc(xmlUrl) </span><br><span class="line">&#123;</span><br><span class="line">try //Internet Explorer</span><br><span class="line">&#123;</span><br><span class="line">xmlDoc=new ActiveXObject(&quot;Microsoft.XMLDOM&quot;);</span><br><span class="line">&#125;</span><br><span class="line">catch(e)</span><br><span class="line">&#123;</span><br><span class="line">  try //Firefox, Mozilla, Opera, etc.</span><br><span class="line">    &#123;</span><br><span class="line">  xmlDoc=document.implementation.createDocument(&quot;&quot;,&quot;&quot;,null);</span><br><span class="line">    &#125;</span><br><span class="line">  catch(e) &#123;alert(e.message)&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">try </span><br><span class="line">&#123;</span><br><span class="line">  xmlDoc.async=false;</span><br><span class="line">  xmlDoc.load(xmlUrl);</span><br><span class="line">&#125;</span><br><span class="line">catch(e) &#123;</span><br><span class="line">try //Google Chrome  </span><br><span class="line">  &#123;  </span><br><span class="line">var chromeXml = new XMLHttpRequest();</span><br><span class="line">chromeXml.open(&quot;GET&quot;, xmlUrl, false);</span><br><span class="line">chromeXml.send(null);</span><br><span class="line">xmlDoc = chromeXml.responseXML.documentElement; </span><br><span class="line">//alert(xmlDoc.childNodes[0].nodeName);</span><br><span class="line">//return xmlDoc;    </span><br><span class="line">  &#125;  </span><br><span class="line">  catch(e)  </span><br><span class="line">  &#123;  </span><br><span class="line">  alert(e.message)  </span><br><span class="line">  &#125;    </span><br><span class="line">&#125;</span><br><span class="line">return xmlDoc; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var xmllink=&quot;填写你的xml地址&quot;</span><br><span class="line">//访问域名链接就是我上面提到的那个访问域名xml链接</span><br><span class="line"></span><br><span class="line">xmlDoc=loadXMLDoc(xmllink);</span><br><span class="line">var urls = xmlDoc.getElementsByTagName(&apos;Key&apos;);</span><br><span class="line">var date = xmlDoc.getElementsByTagName(&apos;LastModified&apos;);</span><br><span class="line">var wid = 350;</span><br><span class="line">var showNum = 13; //每个相册一次展示多少照片，为4的倍数+1</span><br><span class="line">if ((window.innerWidth) &gt; 1200) &#123; wid = (window.innerWidth * 3) / 18;&#125;</span><br><span class="line">var box = document.getElementById(&apos;box&apos;);</span><br><span class="line">var i = 0;</span><br><span class="line"></span><br><span class="line">var content = new Array();</span><br><span class="line">var tmp=0;</span><br><span class="line">var kkk=-1;</span><br><span class="line">for (var t = 0; t &lt; urls.length ; t++) &#123;</span><br><span class="line">var bucket=urls[t].innerHTML;</span><br><span class="line">var length=bucket.indexOf(&apos;/&apos;);</span><br><span class="line">if(length===bucket.length-1)&#123;</span><br><span class="line">kkk++;</span><br><span class="line">content[kkk]=new Array();</span><br><span class="line">content[kkk][0]=&#123;&apos;url&apos;:bucket,&apos;date&apos;:date[t].innerHTML.substring(0,10)&#125;;</span><br><span class="line">tmp=1;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">content[kkk][tmp++]=&#123;&apos;url&apos;:bucket.substring(length+1),&apos;date&apos;:date[t].innerHTML.substring(0,10)&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for (var i = 0; i &lt; content.length; i++) &#123;</span><br><span class="line">var conBox=document.createElement(&quot;div&quot;);</span><br><span class="line">conBox.id=&apos;conBox&apos;+i;</span><br><span class="line">box.appendChild(conBox);</span><br><span class="line">var item=document.createElement(&quot;div&quot;);</span><br><span class="line">var title=content[i][0].url;</span><br><span class="line">item.innerHTML=&quot;&lt;button class=title style=background:url(&quot;+xmllink+&apos;/&apos; + title + &quot;surface.jpg&quot;+&quot;);background-repeat:no-repeat;&gt;&lt;span style=display:inline;&gt;&lt;strong style=color:#f0f3f6; &gt;&quot; + title.substring(0,title.length - 1) + &quot;&lt;/strong&gt;&lt;/span&gt;&lt;/button&gt;&quot;;</span><br><span class="line">conBox.appendChild(item);</span><br><span class="line"></span><br><span class="line">        for (var j = 1; j &lt; content[i].length &amp;&amp; j &lt; showNum+1; j++) &#123;</span><br><span class="line">        var con=content[i][j].url;</span><br><span class="line">var item=document.createElement(&quot;li&quot;);</span><br><span class="line">if(con.substring(0,con.length-4) != &quot;surface&quot;)&#123;</span><br><span class="line">item.innerHTML=&quot;&lt;div class=imgbox id=imgbox style=height:&quot;+wid+&quot;px;&gt;&lt;img class=imgitem src=&quot;+xmllink+&apos;/&apos; + title + con +&quot; alt=&quot; + con + &quot;&gt;&lt;/div&gt;&lt;span&gt;&quot; + con.substring(0,con.length-4);</span><br><span class="line">conBox.appendChild(item);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if(content[i].length &gt; showNum)&#123;</span><br><span class="line">var moreItem=document.createElement(&quot;button&quot;);</span><br><span class="line">moreItem.className = &quot;btn-more-posts&quot;;</span><br><span class="line">moreItem.id = &quot;more&quot; + i;</span><br><span class="line">moreItem.value = showNum + 1;</span><br><span class="line">let cur = i;</span><br><span class="line">moreItem.onclick = function ()&#123;</span><br><span class="line">moreClick(this,cur,content[cur],content[cur][0].url);</span><br><span class="line">&#125;</span><br><span class="line">moreItem.innerHTML=&quot;&lt;span style=display:inline;&gt;&lt;strong style=color:#f0f3f6;&gt;加载更多&lt;/strong&gt;&lt;/span&gt;&quot;;</span><br><span class="line">conBox.appendChild(moreItem);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function moreClick(obj,cur,cont,title)&#123;</span><br><span class="line">var parent = obj.parentNode;</span><br><span class="line">parent.removeChild(obj);</span><br><span class="line">var j=obj.value;</span><br><span class="line">var begin=j;</span><br><span class="line">for ( ; j &lt; cont.length &amp;&amp; j &lt; Number(showNum) + Number(begin); j++) &#123;</span><br><span class="line">var con=cont[j].url;</span><br><span class="line">var item=document.createElement(&quot;li&quot;);</span><br><span class="line">item.innerHTML=&quot;&lt;div class=imgbox id=imgbox style=height:&quot;+wid+&quot;px;&gt;&lt;img class=imgitem src=&quot;+xmllink+&apos;/&apos;+title+con+&quot; alt=&quot;+con+&quot;&gt;&lt;/div&gt;&lt;span&gt;&quot;+con.substring(0,con.length-4);</span><br><span class="line">parent.appendChild(item);</span><br><span class="line">var v=item.getElementsByTagName(&apos;img&apos;);</span><br><span class="line">v[0].id=imgid;</span><br><span class="line">imgid++;</span><br><span class="line">&#125;</span><br><span class="line">if(cont.length &gt; j)&#123;</span><br><span class="line">obj.value=j;</span><br><span class="line">parent.appendChild(obj);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>其中我们只需要修改 xmllink 的值，就是上文提到的访问域名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var xmllink=&quot;填写你的xml地址&quot;</span><br></pre></td></tr></table></figure><h2 id="上传图片"><a href="#上传图片" class="headerlink" title="上传图片"></a>上传图片</h2><p>上传图片推荐使用「<a href="https://cloud.tencent.com/document/product/436/11366" target="_blank" rel="noopener">使用腾讯云存储客户端</a>」文中推荐的客户端软件哦，其中需要注意的地方如下：</p><p>①上传图片前，需要先在存储桶中建立一个文件夹，文件夹名字就是相册名字，当然可以建立多个文件夹</p><p>②文件夹里不能再建文件夹，不然会出 BUG</p><p>③每个文件夹中需要一张名为<font color="red">surface</font> 的图片，它会自动作为该文件夹相册的的封面</p><p>④确保存储桶的 xml 域名能在浏览器上访问</p><p>⑤尽量自己修改样式以满足自己的需求</p><p>⑥CSS 样式直接写在 md 文件中，不用写在全局 custom.styl 文件中</p><hr><p>然后就 ok 了！可以使用<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code>重新渲染页面查看一下相册！如果有 BUG 也欢迎在评论区中留言，我尽量解决！</p><hr><p>参考：</p><p>Sanarous：「<a href="https://bestzuo.cn/posts/3923764626.html" target="_blank" rel="noopener">hexo博客添加相册页面</a>」</p><p>小鸡：「<a href="https://me.idealli.com/post/73ad4183" target="_blank" rel="noopener">给hexo静态博客添加动态相册功能</a>」</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 相册 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Opencv将视频转换为字符视频</title>
      <link href="/2019/11/17/%E5%88%A9%E7%94%A8Opencv%E5%B0%86%E8%A7%86%E9%A2%91%E8%BD%AC%E6%8D%A2%E4%B8%BA%E5%AD%97%E7%AC%A6%E8%A7%86%E9%A2%91/"/>
      <url>/2019/11/17/%E5%88%A9%E7%94%A8Opencv%E5%B0%86%E8%A7%86%E9%A2%91%E8%BD%AC%E6%8D%A2%E4%B8%BA%E5%AD%97%E7%AC%A6%E8%A7%86%E9%A2%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>摘要：在Python课上学习了将图片转换为字符画的代码，想看看可不可以把视频转换为字符画视频，便有了此次为期一周陆陆续续写的视频画代码。</p><a id="more"></a><h2 id="整体思路"><a href="#整体思路" class="headerlink" title="整体思路"></a>整体思路</h2><ol><li>分离出构成视频的图片</li><li>对图片进行ASCII码的转换</li><li>将转换好的图片进行合成为视频</li><li>本次为了方便测试，未添加删除生成文件的代码，需要手动删除或者自己添加代码。</li></ol><h2 id="将像素转换为ASCII码"><a href="#将像素转换为ASCII码" class="headerlink" title="将像素转换为ASCII码"></a>将像素转换为ASCII码</h2><p>将像素转换为ASCII码是为了在后期上色以及转换为字符时加以区别。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_char</span><span class="params">(r,g,b,alpha = <span class="number">256</span>)</span>:</span></span><br><span class="line">    ascii_char = list(<span class="string">"#RMNHQODBWGPZ*@$C&amp;98?32I1&gt;!:-;. "</span>)</span><br><span class="line">    <span class="comment">#ascii_char = list("$@B%8&amp;WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/\|()1&#123;&#125;[]?-_+~&lt;&gt;i!lI;:oa+&gt;!:+. ")</span></span><br><span class="line">    <span class="keyword">if</span> alpha == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">    length = len(ascii_char)</span><br><span class="line">    gray = int(<span class="number">0.2126</span> * r + <span class="number">0.7152</span> * g + <span class="number">0.0722</span> * b)</span><br><span class="line">    unit = (<span class="number">256.0</span>+<span class="number">1</span>)/len(ascii_char)</span><br><span class="line">    <span class="keyword">return</span> ascii_char[int(gray/unit)]</span><br></pre></td></tr></table></figure><p>​    此函数的输入的图片的三基色加上透明度，分别为R,G,B,ALPHA。此处会在后面用pixel = im.getpixel((j, i))来进行传递值。</p><p>​    其中ascii_char就是字符列表，用来将不同灰度的像素进行不同字符体替换的参照，大家可以参试用不同的字符来观察出最好的组合。ps:听说个数必须为32的倍数，我也没有进行尝试，有兴趣的小伙伴们可以探究下其中的原因。</p><p>​    alpha在为0的时候便是完全透明的图片，所以返回空，当他不为零时则将图片转换为灰度图像，此处运用<br>$$<br>gray = 0.2126 * r + 0.7152 * g + 0.0722 * b<br>$$<br>来将图片转换为灰度图像进行下面的ASCII输出。</p><h2 id="将视频分隔成图片"><a href="#将视频分隔成图片" class="headerlink" title="将视频分隔成图片"></a>将视频分隔成图片</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将视频转换为图片 并进行计数，返回总共生成了多少张图片！</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">video_to_pic</span><span class="params">(vp)</span>:</span></span><br><span class="line">    <span class="comment">#vp = cv2.VideoCapture(video_path)</span></span><br><span class="line">    number = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> vp.isOpened():</span><br><span class="line">        r,frame = vp.read()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">'cache_pic'</span>):</span><br><span class="line">            os.mkdir(<span class="string">'cache_pic'</span>)</span><br><span class="line">        os.chdir(<span class="string">'cache_pic'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        r = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">while</span> r:</span><br><span class="line">        number += <span class="number">1</span></span><br><span class="line">        cv2.imwrite(str(number)+<span class="string">'.jpg'</span>,frame)</span><br><span class="line">        r,frame = vp.read()</span><br><span class="line">    print(<span class="string">'\n由视频一共生成了&#123;&#125;张图片！'</span>.format(number))</span><br><span class="line">    os.chdir(<span class="string">".."</span>)</span><br><span class="line">    <span class="keyword">return</span> number</span><br></pre></td></tr></table></figure><p>​    可以看出来函数的传入值是vp = cv2.VideoCapture(video_path) 我将其放在主函数来进行输入，怕某些小伙伴没看见所以下其下写了备注。</p><p>1.isOpened()的用来检测资源是否在 VideoCapture()函数中打开。</p><p>2.os.chdir在PYTHON中的方法是用于改变当前工作目录到指定的路径。此处直接进入新创建的文件夹将生成的图片直接存入文件夹中。</p><p>3.返回number方便于后面的使用。</p><h2 id="将图片转换为字符图片"><a href="#将图片转换为字符图片" class="headerlink" title="将图片转换为字符图片"></a>将图片转换为字符图片</h2><p>此处分为两个函数进行（明明放在一起可以省事，课当初太懒了，懒得改了555）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">star_to_char</span><span class="params">(number,save_pic_path)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">'cache_char'</span>):</span><br><span class="line">        os.mkdir(<span class="string">'cache_char'</span>)</span><br><span class="line">    img_path_list = [save_pic_path + <span class="string">r'/&#123;&#125;.jpg'</span>.format(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,number+<span class="number">1</span>)] <span class="comment">#生成目标图片文件的路径列表</span></span><br><span class="line">    task = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> image_path <span class="keyword">in</span> img_path_list:</span><br><span class="line">        img_width , img_height = Image.open(image_path).size   <span class="comment">#获取图片的分辨率</span></span><br><span class="line">        task += <span class="number">1</span></span><br><span class="line">        img_to_char(image_path, img_width , img_height, task)</span><br><span class="line">        print(<span class="string">'&#123;&#125;/&#123;&#125; is finished.'</span>.format(task,number))</span><br><span class="line">    print(<span class="string">'======================='</span>)</span><br><span class="line">    print(<span class="string">'All image was finished!'</span>)</span><br><span class="line">    print(<span class="string">'======================='</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>​    第一个函数相当于开始准备函数，其中传入的是上一个传出的总共生成多少个图片的统计number,还有字符图片存储的路径。</p><p>​    img_path_list 是用来存储图片相对路径的列表，采用内置for函数进行存储。</p><p>​    利用Image.open().size来获取图片大小，传入下面的转换函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">img_to_char</span><span class="params">(image_path,raw_width,raw_height,task)</span>:</span></span><br><span class="line">    width = int(raw_width/ <span class="number">6</span>)</span><br><span class="line">    height = int(raw_height / <span class="number">15</span>)</span><br><span class="line">    im = Image.open(image_path).convert(<span class="string">'RGB'</span>)<span class="comment">#必须以RGB模式打开</span></span><br><span class="line">    im = im.resize((width,height),Image.NEAREST)</span><br><span class="line">    </span><br><span class="line">    txt = <span class="string">''</span></span><br><span class="line">    color = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(height):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(width):</span><br><span class="line">            pixel = im.getpixel((j, i))</span><br><span class="line">            color.append((pixel[<span class="number">0</span>],pixel[<span class="number">1</span>],pixel[<span class="number">2</span>])) <span class="comment">#将颜色加入进行索引</span></span><br><span class="line">            <span class="keyword">if</span> len(pixel)==<span class="number">4</span> :</span><br><span class="line">                txt +=get_char(pixel[<span class="number">0</span>],pixel[<span class="number">1</span>],pixel[<span class="number">2</span>],pixel[<span class="number">3</span>])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                txt +=get_char(pixel[<span class="number">0</span>],pixel[<span class="number">1</span>],pixel[<span class="number">2</span>])</span><br><span class="line">        txt += <span class="string">'\n'</span></span><br><span class="line">        color.append((<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>))</span><br><span class="line"></span><br><span class="line">    im_txt = Image.new(<span class="string">"RGB"</span>,(raw_width,raw_height),(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>))</span><br><span class="line">    dr = ImageDraw.Draw(im_txt)</span><br><span class="line">    <span class="comment">#font = ImageFont.truetype('consola.ttf', 10, encoding='unic') #改为这个字体会让图片比例改变</span></span><br><span class="line">    font = ImageFont.load_default().font</span><br><span class="line">    x,y = <span class="number">0</span>,<span class="number">0</span></span><br><span class="line">    font_w,font_h=font.getsize(txt[<span class="number">1</span>])</span><br><span class="line">    font_h *= <span class="number">1.37</span> <span class="comment">#调整字体大小</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(txt)):</span><br><span class="line">        <span class="keyword">if</span>(txt[i]==<span class="string">'\n'</span>):</span><br><span class="line">            x += font_h</span><br><span class="line">            y = -font_w</span><br><span class="line">        dr.text((y,x),txt[i] ,fill = color[i])</span><br><span class="line">        y+=font_w</span><br><span class="line">    os.chdir(<span class="string">'cache_char'</span>)</span><br><span class="line">    im_txt.save(str(task)+<span class="string">'.jpg'</span>)</span><br><span class="line">    os.chdir(<span class="string">".."</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>​    要提醒的是，看下面代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">width = int(raw_width/ 6)</span><br><span class="line">height = int(raw_height / 15)</span><br></pre></td></tr></table></figure><p>​    如果要将图片进行转换必须把图片大小进行转换，否则转换出的代码必定会出现乱码。</p><p>​    dr = ImageDraw.Draw(im_txt)是opencv中创建画板的函数。</p><p>​    font_h是将字体进行调整，可以让生成的字符画视频更加的好康。</p><p>​    下面 for i in range(len(txt)):就是遍历txt按行按列进行写入图片，当遇到\n时推出并进行上色，最后将图片进行输出。</p><h2 id="将图片合成为视频"><a href="#将图片合成为视频" class="headerlink" title="将图片合成为视频"></a>将图片合成为视频</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jpg_to_video</span><span class="params">(char_image_path,FPS)</span>:</span></span><br><span class="line">    video_fourcc=VideoWriter_fourcc(*<span class="string">"MP42"</span>)  <span class="comment"># 设置视频编码器,这里使用使用MP42编码器,可以生成更小的视频文件</span></span><br><span class="line">    char_img_path_list = [char_image_path + <span class="string">r'/&#123;&#125;.jpg'</span>.format(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,number+<span class="number">1</span>)] <span class="comment">#生成目标字符图片文件的路径列表</span></span><br><span class="line">    char_img_test = Image.open(char_img_path_list[<span class="number">1</span>]).size   <span class="comment">#获取图片的分辨率</span></span><br><span class="line">    video_writter= VideoWriter(<span class="string">'video/new_char_video.avi'</span> , video_fourcc , FPS , char_img_test)</span><br><span class="line">    load = <span class="string">'loading.'</span></span><br><span class="line">    count = <span class="number">0</span> <span class="comment">#用来清空load进度条的计数</span></span><br><span class="line">    <span class="keyword">for</span> image_path <span class="keyword">in</span> char_img_path_list:</span><br><span class="line">        img = cv2.imread(image_path)</span><br><span class="line">        video_writter.write(img)</span><br><span class="line">        load = load + <span class="string">'.'</span></span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> count % <span class="number">50</span> == <span class="number">0</span> :</span><br><span class="line">            load = <span class="string">'loading'</span></span><br><span class="line">            print()</span><br><span class="line">        print(<span class="string">'\r'</span>,load,end=<span class="string">''</span>)</span><br><span class="line">    video_writter.release()</span><br><span class="line">    print(<span class="string">'\n'</span>)</span><br><span class="line">    print(<span class="string">'======================='</span>)</span><br><span class="line">    print(<span class="string">'The video is finished!'</span>)</span><br><span class="line">    print(<span class="string">'======================='</span>)</span><br></pre></td></tr></table></figure><p>​    此处最需要注意的是第二行的视频编码器，我进行了大量的测试，发现MP42是可以生成较小并且较小的视频文件的编码方式，具体详细参数可以参考</p><p>[]: <a href="https://blog.csdn.net/Archger/article/details/102868923" target="_blank" rel="noopener">https://blog.csdn.net/Archger/article/details/102868923</a></p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 </span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image,ImageFont,ImageDraw</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> cv2 <span class="keyword">import</span> VideoWriter, VideoWriter_fourcc, imread, resize</span><br><span class="line"><span class="comment">#=========================</span></span><br><span class="line"><span class="comment">#coding:UTF-8</span></span><br><span class="line"><span class="comment"># 视频转字符画含音频version-1</span></span><br><span class="line"><span class="comment">#参考1：https://blog.csdn.net/mp624183768/article/details/81161260</span></span><br><span class="line"><span class="comment">#参考2：https://blog.csdn.net/qq_42820064/article/details/90958577</span></span><br><span class="line"><span class="comment">#参考3：https://blog.csdn.net/zj360202/article/details/79026891</span></span><br><span class="line"><span class="comment">#=========================</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_char</span><span class="params">(r,g,b,alpha = <span class="number">256</span>)</span>:</span></span><br><span class="line">    ascii_char = list(<span class="string">"#RMNHQODBWGPZ*@$C&amp;98?32I1&gt;!:-;. "</span>)</span><br><span class="line">    <span class="comment">#ascii_char = list("$@B%8&amp;WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/\|()1&#123;&#125;[]?-_+~&lt;&gt;i!lI;:oa+&gt;!:+. ")</span></span><br><span class="line">    <span class="keyword">if</span> alpha == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">    length = len(ascii_char)</span><br><span class="line">    gray = int(<span class="number">0.2126</span> * r + <span class="number">0.7152</span> * g + <span class="number">0.0722</span> * b)</span><br><span class="line">    unit = (<span class="number">256.0</span>+<span class="number">1</span>)/len(ascii_char)</span><br><span class="line">    <span class="keyword">return</span> ascii_char[int(gray/unit)]</span><br><span class="line"></span><br><span class="line"><span class="comment">#将视频转换为图片 并进行计数，返回总共生成了多少张图片！</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">video_to_pic</span><span class="params">(vp)</span>:</span></span><br><span class="line">    <span class="comment">#vp = cv2.VideoCapture(video_path)</span></span><br><span class="line">    number = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> vp.isOpened():</span><br><span class="line">        r,frame = vp.read()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">'cache_pic'</span>):</span><br><span class="line">            os.mkdir(<span class="string">'cache_pic'</span>)</span><br><span class="line">        os.chdir(<span class="string">'cache_pic'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        r = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">while</span> r:</span><br><span class="line">        number += <span class="number">1</span></span><br><span class="line">        cv2.imwrite(str(number)+<span class="string">'.jpg'</span>,frame)</span><br><span class="line">        r,frame = vp.read()</span><br><span class="line">    print(<span class="string">'\n由视频一共生成了&#123;&#125;张图片！'</span>.format(number))</span><br><span class="line">    os.chdir(<span class="string">".."</span>)</span><br><span class="line">    <span class="keyword">return</span> number</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">img_to_char</span><span class="params">(image_path,raw_width,raw_height,task)</span>:</span></span><br><span class="line">    width = int(raw_width/ <span class="number">6</span>)</span><br><span class="line">    height = int(raw_height / <span class="number">15</span>)</span><br><span class="line">    im = Image.open(image_path).convert(<span class="string">'RGB'</span>)<span class="comment">#必须以RGB模式打开</span></span><br><span class="line">    im = im.resize((width,height),Image.NEAREST)</span><br><span class="line">    </span><br><span class="line">    txt = <span class="string">''</span></span><br><span class="line">    color = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(height):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(width):</span><br><span class="line">            pixel = im.getpixel((j, i))</span><br><span class="line">            color.append((pixel[<span class="number">0</span>],pixel[<span class="number">1</span>],pixel[<span class="number">2</span>])) <span class="comment">#将颜色加入进行索引</span></span><br><span class="line">            <span class="keyword">if</span> len(pixel)==<span class="number">4</span> :</span><br><span class="line">                txt +=get_char(pixel[<span class="number">0</span>],pixel[<span class="number">1</span>],pixel[<span class="number">2</span>],pixel[<span class="number">3</span>])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                txt +=get_char(pixel[<span class="number">0</span>],pixel[<span class="number">1</span>],pixel[<span class="number">2</span>])</span><br><span class="line">        txt += <span class="string">'\n'</span></span><br><span class="line">        color.append((<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>))</span><br><span class="line"></span><br><span class="line">    im_txt = Image.new(<span class="string">"RGB"</span>,(raw_width,raw_height),(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>))</span><br><span class="line">    dr = ImageDraw.Draw(im_txt)</span><br><span class="line">    <span class="comment">#font = ImageFont.truetype('consola.ttf', 10, encoding='unic') #改为这个字体会让图片比例改变</span></span><br><span class="line">    font = ImageFont.load_default().font</span><br><span class="line">    x,y = <span class="number">0</span>,<span class="number">0</span></span><br><span class="line">    font_w,font_h=font.getsize(txt[<span class="number">1</span>])</span><br><span class="line">    font_h *= <span class="number">1.37</span> <span class="comment">#调整字体大小</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(txt)):</span><br><span class="line">        <span class="keyword">if</span>(txt[i]==<span class="string">'\n'</span>):</span><br><span class="line">            x += font_h</span><br><span class="line">            y = -font_w</span><br><span class="line">        dr.text((y,x),txt[i] ,fill = color[i])</span><br><span class="line">        y+=font_w</span><br><span class="line">    os.chdir(<span class="string">'cache_char'</span>)</span><br><span class="line">    im_txt.save(str(task)+<span class="string">'.jpg'</span>)</span><br><span class="line">    os.chdir(<span class="string">".."</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">star_to_char</span><span class="params">(number,save_pic_path)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">'cache_char'</span>):</span><br><span class="line">        os.mkdir(<span class="string">'cache_char'</span>)</span><br><span class="line">    img_path_list = [save_pic_path + <span class="string">r'/&#123;&#125;.jpg'</span>.format(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,number+<span class="number">1</span>)] <span class="comment">#生成目标图片文件的路径列表</span></span><br><span class="line">    task = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> image_path <span class="keyword">in</span> img_path_list:</span><br><span class="line">        img_width , img_height = Image.open(image_path).size   <span class="comment">#获取图片的分辨率</span></span><br><span class="line">        task += <span class="number">1</span></span><br><span class="line">        img_to_char(image_path, img_width , img_height, task)</span><br><span class="line">        print(<span class="string">'&#123;&#125;/&#123;&#125; is finished.'</span>.format(task,number))</span><br><span class="line">    print(<span class="string">'======================='</span>)</span><br><span class="line">    print(<span class="string">'All image was finished!'</span>)</span><br><span class="line">    print(<span class="string">'======================='</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jpg_to_video</span><span class="params">(char_image_path,FPS)</span>:</span></span><br><span class="line">    video_fourcc=VideoWriter_fourcc(*<span class="string">"MP42"</span>)  <span class="comment"># 设置视频编码器,这里使用使用MP42编码器,可以生成更小的视频文件</span></span><br><span class="line">    char_img_path_list = [char_image_path + <span class="string">r'/&#123;&#125;.jpg'</span>.format(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,number+<span class="number">1</span>)] <span class="comment">#生成目标字符图片文件的路径列表</span></span><br><span class="line">    char_img_test = Image.open(char_img_path_list[<span class="number">1</span>]).size   <span class="comment">#获取图片的分辨率</span></span><br><span class="line">    video_writter= VideoWriter(<span class="string">'video/new_char_video.avi'</span> , video_fourcc , FPS , char_img_test)</span><br><span class="line">    load = <span class="string">'loading.'</span></span><br><span class="line">    count = <span class="number">0</span> <span class="comment">#用来清空load进度条的计数</span></span><br><span class="line">    <span class="keyword">for</span> image_path <span class="keyword">in</span> char_img_path_list:</span><br><span class="line">        img = cv2.imread(image_path)</span><br><span class="line">        video_writter.write(img)</span><br><span class="line">        load = load + <span class="string">'.'</span></span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> count % <span class="number">50</span> == <span class="number">0</span> :</span><br><span class="line">            load = <span class="string">'loading'</span></span><br><span class="line">            print()</span><br><span class="line">        print(<span class="string">'\r'</span>,load,end=<span class="string">''</span>)</span><br><span class="line">    video_writter.release()</span><br><span class="line">    print(<span class="string">'\n'</span>)</span><br><span class="line">    print(<span class="string">'======================='</span>)</span><br><span class="line">    print(<span class="string">'The video is finished!'</span>)</span><br><span class="line">    print(<span class="string">'======================='</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    </span><br><span class="line">    video_path = <span class="string">'video/test.mp4'</span></span><br><span class="line">    save_pic_path = <span class="string">'cache_pic'</span></span><br><span class="line">    save_charpic_path = <span class="string">'cache_char'</span></span><br><span class="line"></span><br><span class="line">    vp = cv2.VideoCapture(video_path)</span><br><span class="line">    number = video_to_pic(vp)</span><br><span class="line">    FPS = vp.get(cv2.CAP_PROP_FPS)</span><br><span class="line">    star_to_char(number , save_pic_path)</span><br><span class="line">    vp.release()</span><br><span class="line">    jpg_to_video(save_charpic_path,FPS)</span><br></pre></td></tr></table></figure><p>注：转载请注明出处</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> Opencv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初入密码学之置换加密与暴力破解</title>
      <link href="/2019/09/21/%E5%AF%86%E7%A0%81%E5%AD%A6%E4%B9%8B%E7%BD%AE%E6%8D%A2%E5%8A%A0%E5%AF%86%E4%B8%8E%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/"/>
      <url>/2019/09/21/%E5%AF%86%E7%A0%81%E5%AD%A6%E4%B9%8B%E7%BD%AE%E6%8D%A2%E5%8A%A0%E5%AF%86%E4%B8%8E%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>摘要：此为学习现代密码学的一次作业，能进行不是较大文本量的txt文本周期性置换加密，并进行密文的暴力破解。</p><a id="more"></a><h2 id="文件解释"><a href="#文件解释" class="headerlink" title="文件解释"></a>文件解释</h2><p>1.将文件放在同一个python文件夹下使用</p><p>2.encryption.py为加密程序，decrypt为暴力破解程序</p><p>3.plain.txt为初始待加密文本，cipher.txt为加密后生成的文本，DecryptWoed.txt为暴力破解后生成的文本。</p><p>4.若要运行可删除 (3)中的三个文本重新运行。</p><h2 id="加密程序运行解释"><a href="#加密程序运行解释" class="headerlink" title="加密程序运行解释"></a>加密程序运行解释</h2><p>1.首先输入置换加密密钥的位数。</p><p>2.输入置换加密的密钥。若加密密钥为(1 5 6 2 3 )则将其代换后输入 531462</p><p>3.将待加密文本重命名为plain.txt</p><p>4.等待加密后生成cipher.txt</p><h2 id="解密程序运行解释"><a href="#解密程序运行解释" class="headerlink" title="解密程序运行解释"></a>解密程序运行解释</h2><p>1.输入密钥长度即可进行暴力破解</p><p>2.采用的是深度搜索来遍历密钥的所有可能。</p><p>3.等待解密后生成DecryptWoed.txt。</p><p>4.其中所以可能会在DecryptWoed.txt以回车进行分隔。</p><h2 id="加密程序"><a href="#加密程序" class="headerlink" title="加密程序"></a>加密程序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">translate</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#将txt文本存入word1</span></span><br><span class="line">    file = open(<span class="string">'plain.txt'</span>,<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">    word1 = file.read()</span><br><span class="line">    file.close</span><br><span class="line">    <span class="comment">#将txt文本转换只剩下英文单词</span></span><br><span class="line">    word=<span class="string">''</span></span><br><span class="line">    word2 = re.findall(<span class="string">'[a-zA-Z]+'</span>, word1)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> word2:</span><br><span class="line">        word = word + i</span><br><span class="line">    <span class="keyword">return</span> word</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encryption</span><span class="params">(wordlist,deltalist)</span>:</span></span><br><span class="line">    <span class="comment">#进行置换加密</span></span><br><span class="line">    NewWordlist = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> wordlist:</span><br><span class="line">        con = <span class="string">''</span></span><br><span class="line">        str = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> deltalist:</span><br><span class="line">            con = con + str[ j <span class="number">-1</span> ]</span><br><span class="line">        NewWordlist.append(con)</span><br><span class="line">    <span class="keyword">return</span> NewWordlist</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(word)</span>:</span></span><br><span class="line">    file2 = open(<span class="string">'cipher.txt'</span>,<span class="string">'a'</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> word:</span><br><span class="line">        file2.write(i)</span><br><span class="line"></span><br><span class="line">    file2.close()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    deltasize = int(input(<span class="string">"请输入您的密钥位数："</span>))</span><br><span class="line">    delta = input(<span class="string">"请输入您的密钥："</span>)</span><br><span class="line">    deltalist=[]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> delta:</span><br><span class="line">        deltalist.append(int(j))</span><br><span class="line"></span><br><span class="line">    <span class="comment">#将word存入wordlist列表中</span></span><br><span class="line">    word = translate()</span><br><span class="line">    wordlist = []</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    str = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> word :</span><br><span class="line">        <span class="keyword">if</span>(j &lt; deltasize):</span><br><span class="line">            str = str +i</span><br><span class="line">            j=j+<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span>(j == deltasize ):</span><br><span class="line">            wordlist.append(str)</span><br><span class="line">            j = <span class="number">0</span></span><br><span class="line">            str = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> wordlist:</span><br><span class="line">        str = i</span><br><span class="line">        print(str)</span><br><span class="line">    NewWordlist = []</span><br><span class="line">    NewWordlist = encryption(wordlist,deltalist)</span><br><span class="line">    <span class="comment">#用save函数存入cipher.txt中</span></span><br><span class="line">    save(NewWordlist)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h2 id="暴力破解代码"><a href="#暴力破解代码" class="headerlink" title="暴力破解代码"></a>暴力破解代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">def save(word):</span><br><span class="line">    #存储</span><br><span class="line">    file2 = open(&apos;DecryptWoed.txt&apos;,&apos;a&apos;,encoding=&apos;utf-8&apos;)</span><br><span class="line">    for i in word:</span><br><span class="line">        file2.write(i)</span><br><span class="line">    file2.write((&quot;\n&quot;))</span><br><span class="line">    file2.close()</span><br><span class="line"></span><br><span class="line">def decrypt(wordlist,deltalist):</span><br><span class="line">    #进行置换解密</span><br><span class="line">    NewWordlist = []</span><br><span class="line">    for i in wordlist:</span><br><span class="line">        con = &apos;&apos;</span><br><span class="line">        str = i</span><br><span class="line">        for j in deltalist:</span><br><span class="line">            con = con + str[ j -1 ]</span><br><span class="line">        NewWordlist.append(con)</span><br><span class="line">    return NewWordlist</span><br><span class="line"></span><br><span class="line">def DFS(p,delta,token,newdelta,wordlist):</span><br><span class="line">    #深度搜索密钥的所以可能性</span><br><span class="line">    if p == len(delta):</span><br><span class="line">        print(newdelta)</span><br><span class="line">        save(decrypt(wordlist,newdelta))</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    for index in range(len(delta)):</span><br><span class="line">        if token[index] == True:</span><br><span class="line">            newdelta[p] = delta[index]</span><br><span class="line">            token[index] = False</span><br><span class="line">            DFS(p+1,delta,token,newdelta,wordlist)</span><br><span class="line">            token[index] = True</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    deltasize = int(input(&quot;输入密钥位数：&quot;))</span><br><span class="line">    delta =[]</span><br><span class="line">    for i in range(1, deltasize + 1):</span><br><span class="line">        delta.append(i)</span><br><span class="line">    token = [True for i in range(len(delta))]   #用来深度搜索判断</span><br><span class="line">    newdelta = [&apos;&apos; for i in range(0, len(delta))]  #引用来存储一次深度优先后的结果</span><br><span class="line">    file = open(&apos;cipher.txt&apos;,&apos;r&apos;,encoding=&apos;utf-8&apos;)</span><br><span class="line">    word = file.read()</span><br><span class="line">    #将word存入wordlist列表中</span><br><span class="line">    wordlist = []</span><br><span class="line">    j = 0</span><br><span class="line">    str = &apos;&apos;</span><br><span class="line">    for i in word :</span><br><span class="line">        if(j &lt; deltasize):</span><br><span class="line">            str = str +i</span><br><span class="line">            j=j+1</span><br><span class="line">        if(j == deltasize ):</span><br><span class="line">            wordlist.append(str)</span><br><span class="line">            j = 0</span><br><span class="line">            str = &apos;&apos;</span><br><span class="line"></span><br><span class="line">    DFS(0,delta,token,newdelta,wordlist)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 现代密码学 </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 现代密码学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创建神经网络并进行训练和查询</title>
      <link href="/2019/08/03/%E5%88%9B%E5%BB%BA%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%B9%B6%E8%BF%9B%E8%A1%8C%E8%AE%AD%E7%BB%83%E5%92%8C%E6%9F%A5%E8%AF%A2/"/>
      <url>/2019/08/03/%E5%88%9B%E5%BB%BA%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%B9%B6%E8%BF%9B%E8%A1%8C%E8%AE%AD%E7%BB%83%E5%92%8C%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>摘要：通过对神经网络编程这本书的内容，模仿其中的代码，对初次学习神经网络进行熟悉，并逐步完成神经网络的搭建，完成对手写数字的识别。</p><a id="more"></a><h2 id="神经网络的三大步骤"><a href="#神经网络的三大步骤" class="headerlink" title="神经网络的三大步骤"></a>神经网络的三大步骤</h2><ol><li><p>初始化函数–设定输入节点、隐藏节点和输出节点的数量。</p></li><li><p>训练–学习给定的训练集样本后，优化权重。</p></li><li><p>查询–给定输入，从输出的节点给出答案。</p></li></ol><h2 id="初始化网络–输入"><a href="#初始化网络–输入" class="headerlink" title="初始化网络–输入"></a>初始化网络–输入</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self , inputnodes , hiddennodes , outputnodes , learningrate)</span>:</span>   </span><br><span class="line">        <span class="comment">#set number of nodes in each input, hidden, output layer</span></span><br><span class="line">    </span><br><span class="line">        self.inodes = inputnodes</span><br><span class="line">        self.hnodes = hiddennodes</span><br><span class="line">        self.onodes = outputnodes</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">#链接权重矩阵</span></span><br><span class="line">        <span class="comment">#link weight matrices, wih and who 注释：此处wih的意思是 w:权重  i:input  h:hidden ,后面的who同理</span></span><br><span class="line">        <span class="comment">#weights inside the arrays are w_i_j,where link is from node i to node j in the next layter</span></span><br><span class="line">        <span class="comment">#w11 w21</span></span><br><span class="line">        <span class="comment">#w12 w22 etc</span></span><br><span class="line">        self.wih = (numpy.random.rand(self.hnodes, self.inodes) - <span class="number">0.5</span>)</span><br><span class="line">        self.who = (numpy.random.rand(self.onodes, self.hnodes) - <span class="number">0.5</span>)</span><br><span class="line">    </span><br><span class="line">        <span class="comment">#learning rate</span></span><br><span class="line">        self.lr = learningrate</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">#导入scipy.special 才可以用</span></span><br><span class="line">        <span class="comment">#activation function is the sigmoid function</span></span><br><span class="line">        <span class="comment">#使用lambda来创建函数， 函数接受了X，返回了scipy.special.expit(x)，这就是S函数，使用lambda创建的匿名函数</span></span><br><span class="line">        self.activation_function = <span class="keyword">lambda</span> x: scipy.special.expit(x)</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>其中，需要注意的地方有：</p><ul><li>函数名 __init__是前后两条“_” ,如果只有一条下划线的话会报错TypeError : object() takes no parameters</li></ul><p>参考链接：<a href="https://blog.csdn.net/qq_26489165/article/details/80595864" target="_blank" rel="noopener">https://blog.csdn.net/qq_26489165/article/details/80595864</a></p><ul><li>链接权重矩阵：此处wih的意思是 w:权重  i:input  h:hidden ,后面的whoy也是同理</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">self.wih = (numpy.random.rand(self.hnodes, self.inodes) - <span class="number">0.5</span>)</span><br><span class="line">self.who = (numpy.random.rand(self.onodes, self.hnodes) - <span class="number">0.5</span>)</span><br></pre></td></tr></table></figure><ul><li>使用lambda来创建函数， 函数接受了X，返回了scipy.special.expit(x)，这就是S函数，使用lambda创建的匿名函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.activation_function = <span class="keyword">lambda</span> x: scipy.special.expit(x)</span><br></pre></td></tr></table></figure><h2 id="初始化网络–查询"><a href="#初始化网络–查询" class="headerlink" title="初始化网络–查询"></a>初始化网络–查询</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#convert inouts list to 2d array</span></span><br><span class="line">        inputs = numpy.array(inputs_list,ndmin= <span class="number">2</span> ) .T</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#calculate signals into hidden layer</span></span><br><span class="line">        hidden_inputs = numpy.dot(self.wih , inputs)</span><br><span class="line">        <span class="comment">#calculate the signals emerging from hidden layer</span></span><br><span class="line">        hidden_outputs = self.activation_function(hidden_inputs)</span><br><span class="line">        <span class="comment">#calculate signals into final output layer</span></span><br><span class="line">        final_inputs = numpy.dot(self.who , hidden_outputs)</span><br><span class="line">        <span class="comment">#calculate the signals emerging from final output layer</span></span><br><span class="line">        final_outputs = self.activation_function(final_inputs)</span><br><span class="line">        <span class="keyword">return</span> final_outputs</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="初始化网络–训练"><a href="#初始化网络–训练" class="headerlink" title="初始化网络–训练"></a>初始化网络–训练</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#train the neural network</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(self, input_list, targets_list)</span>:</span></span><br><span class="line">    <span class="comment">#可以发现下面的代码和query中的几乎完全一样。因为所使用的从输入层前馈信号到最终输出层完全一样。而多处理的targets 是用来训练样本的。</span></span><br><span class="line">    <span class="comment">#cober inputs list to 2d array</span></span><br><span class="line">    inputs = numpy.array(input_list,ndmin=<span class="number">2</span>).T</span><br><span class="line">    targets = numpy.array(targets_list,ndmin=<span class="number">2</span>).T</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#calculate signals into hidden layer</span></span><br><span class="line">    hidden_inputs = numpy.dot(self.wih , inputs)</span><br><span class="line">    <span class="comment">#calculate the signals emerging from hidden layer</span></span><br><span class="line">    hidden_outputs = self.activation_function(hidden_inputs)</span><br><span class="line">     <span class="comment">#calculate signals into final output layer</span></span><br><span class="line">    final_inputs = numpy.dot(self.who , hidden_outputs)</span><br><span class="line">    <span class="comment">#calculate the signals emerging from final output layer</span></span><br><span class="line">    final_outputs = self.activation_function(final_inputs)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#error is the (target -actual),即为反向传播的误差</span></span><br><span class="line">    output_errors = targets - final_outputs</span><br><span class="line">    <span class="comment">#hidden layer error is the output_errors , split by weights,recombined at hodden nodes</span></span><br><span class="line">    hidden_errors = numpy.dot(self.who.T , output_errors)</span><br><span class="line">    <span class="comment">#update the weights for the links between the hidden and output layers</span></span><br><span class="line">    <span class="comment">#其中，学习率是self.lr  利用numpy.dot进行矩阵的乘法</span></span><br><span class="line">    self.who += self.lr * numpy.dot((output_errors * final_outputs * (<span class="number">1.0</span> - final_outputs)), numpy.transpose(hidden_outputs))</span><br><span class="line">    <span class="comment">#update the weights for the links between the intput and hidden layers</span></span><br><span class="line">    self.wih += self.lr * numpy.dot((hidden_errors * hidden_outputs * (<span class="number">1.0</span> - hidden_outputs)), numpy.transpose(inputs))</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>其中，需要注意的是：</p><ol><li>可以发现下面的代码和query中的几乎完全一样。因为所使用的从输入层前馈信号到最终输出层完全一样。而多处理的targets 是用来训练样本的。</li><li>而error中error is the (target -actual),即为反向传播的误差</li><li>学习率是self.lr  利用numpy.dot进行矩阵的乘法</li></ol><h2 id="创建神经网络对象"><a href="#创建神经网络对象" class="headerlink" title="创建神经网络对象"></a>创建神经网络对象</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#number of input, hidden and output nodes</span></span><br><span class="line">input_nodes = <span class="number">784</span></span><br><span class="line">hidden_nodes = <span class="number">100</span></span><br><span class="line">output_nodes = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#learn rate is 0.3 （学习率）</span></span><br><span class="line">learning_rate = <span class="number">0.3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#create instance of neural network</span></span><br><span class="line">n = neuralNetwork(input_nodes, hidden_nodes, output_nodes, learning_rate)</span><br></pre></td></tr></table></figure><p>为什么选择784个输入节点呢？请记住这是28*28的结果，即是组成手写数字图像的像素个数。</p><p>选择100个隐藏节点并没有固定规定，书中认为神经网络可以发现在输入中的特征或模式，这些模式或者特征可以使用比输入本身更简短的表达，因此没有和选择比784大的数字。选择比输入节点小的数量来强制网络尝试总结输入的主要特点。但选择太少的隐藏节点就限制了网络的能力。给定10个输出层的节点对应的是10个标签。</p><p>强调一点：对于一个问题，选择多少个隐藏层节点并不存在一份最佳方法。最好的办法就是进行实验，直到找到适合你解决问题的一个数字。</p><h2 id="测试网络"><a href="#测试网络" class="headerlink" title="测试网络"></a>测试网络</h2><ul><li>打开文件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#load the mnist training data CSV file into a list</span></span><br><span class="line">training_data_file = open(<span class="string">"TestandTrain/mnist_train_100.csv"</span>,<span class="string">'r'</span>)</span><br><span class="line">training_data_list = training_data_file.readlines()</span><br><span class="line">training_data_file.close()</span><br></pre></td></tr></table></figure><p>将文件放在同目录下即可直接调用</p><ul><li>训练网络</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># train the neural network</span></span><br><span class="line"><span class="comment"># go through all records in the training data set </span></span><br><span class="line"><span class="keyword">for</span> record <span class="keyword">in</span> training_data_list:</span><br><span class="line">    <span class="comment"># split the record by the ',' commas</span></span><br><span class="line">    all_values = record.split(<span class="string">','</span>)</span><br><span class="line">    <span class="comment"># scale and shift the inputs</span></span><br><span class="line">    inputs = (numpy.asfarray(all_values[<span class="number">1</span>:]) / <span class="number">255.0</span> * <span class="number">0.99</span>) + <span class="number">0.01</span></span><br><span class="line">    targets = numpy.zeros(output_nodes) + <span class="number">0.01</span></span><br><span class="line">    <span class="comment"># all_values[0] is the target label for this record</span></span><br><span class="line">    targets[int(all_values[<span class="number">0</span>])] = <span class="number">0.99</span></span><br><span class="line">    n.train(inputs, targets)</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="查询网络"><a href="#查询网络" class="headerlink" title="查询网络"></a>查询网络</h2><ul><li>打开文件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#load the mnist test data CSV file into a list</span></span><br><span class="line">test_data_file = open(<span class="string">"TestandTrain/mnist_test_10.csv"</span>,<span class="string">'r'</span>)</span><br><span class="line">test_data_list = test_data_file.readlines()</span><br><span class="line">test_data_file.close()</span><br></pre></td></tr></table></figure><ul><li>打印标签</li></ul><p>并进行matplotlib进行图形化显示并查看测试概率</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#get the first test record</span></span><br><span class="line">all_values = test_data_list[<span class="number">2</span>].split(<span class="string">','</span>)</span><br><span class="line"><span class="comment">#print the lable</span></span><br><span class="line"><span class="comment">#打印标签</span></span><br><span class="line">print(<span class="string">'label:'</span>,all_values[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">image_array = numpy.asfarray(all_values[<span class="number">1</span>:]).reshape((<span class="number">28</span>,<span class="number">28</span>))</span><br><span class="line">matplotlib.pyplot.imshow(image_array,cmap=<span class="string">'Greys'</span>,interpolation=<span class="string">'None'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n.query((numpy.asfarray(all_values[<span class="number">1</span>:])/ <span class="number">255.0</span> * <span class="number">0.99</span>) + <span class="number">0.01</span>)</span><br></pre></td></tr></table></figure><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="comment">#scipy.special for the sigmoid function expit()</span></span><br><span class="line"><span class="keyword">import</span> scipy.special</span><br><span class="line"><span class="comment">#添加绘图库</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot</span><br><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line"><span class="comment">#neural network classdefinition</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">neuralNetwork</span>:</span></span><br><span class="line">    <span class="comment">#初始化网络</span></span><br><span class="line">    <span class="comment">#initialise the neural netwoak</span></span><br><span class="line">    <span class="comment">#注意！-----&gt;此处init前后均是双下划线，否则报错</span></span><br><span class="line">    <span class="comment">#TypeError: object() takes no parameters</span></span><br><span class="line">    <span class="comment">#参考链接：https://blog.csdn.net/qq_26489165/article/details/80595864</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self , inputnodes , hiddennodes , outputnodes , learningrate)</span>:</span>   </span><br><span class="line">        <span class="comment">#set number of nodes in each input, hidden, output layer</span></span><br><span class="line">    </span><br><span class="line">        self.inodes = inputnodes</span><br><span class="line">        self.hnodes = hiddennodes</span><br><span class="line">        self.onodes = outputnodes</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">#链接权重矩阵</span></span><br><span class="line">        <span class="comment">#link weight matrices, wih and who 注释：此处wih的意思是 w:权重  i:input  h:hidden ,后面的who同理</span></span><br><span class="line">        <span class="comment">#weights inside the arrays are w_i_j,where link is from node i to node j in the next layter</span></span><br><span class="line">        <span class="comment">#w11 w21</span></span><br><span class="line">        <span class="comment">#w12 w22 etc</span></span><br><span class="line">        self.wih = (numpy.random.rand(self.hnodes, self.inodes) - <span class="number">0.5</span>)</span><br><span class="line">        self.who = (numpy.random.rand(self.onodes, self.hnodes) - <span class="number">0.5</span>)</span><br><span class="line">    </span><br><span class="line">        <span class="comment">#learning rate</span></span><br><span class="line">        self.lr = learningrate</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">#导入scipy.special 才可以用</span></span><br><span class="line">        <span class="comment">#activation function is the sigmoid function</span></span><br><span class="line">        <span class="comment">#使用lambda来创建函数， 函数接受了X，返回了scipy.special.expit(x)，这就是S函数，使用lambda创建的匿名函数</span></span><br><span class="line">        self.activation_function = <span class="keyword">lambda</span> x: scipy.special.expit(x)</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#train the neural network</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(self, input_list, targets_list)</span>:</span></span><br><span class="line">        <span class="comment">#可以发现下面的代码和query中的几乎完全一样。因为所使用的从输入层前馈信号到最终输出层完全一样。而多处理的targets 是用来训练样本的。</span></span><br><span class="line">        <span class="comment">#cober inputs list to 2d array</span></span><br><span class="line">        inputs = numpy.array(input_list,ndmin=<span class="number">2</span>).T</span><br><span class="line">        targets = numpy.array(targets_list,ndmin=<span class="number">2</span>).T</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#calculate signals into hidden layer</span></span><br><span class="line">        hidden_inputs = numpy.dot(self.wih , inputs)</span><br><span class="line">        <span class="comment">#calculate the signals emerging from hidden layer</span></span><br><span class="line">        hidden_outputs = self.activation_function(hidden_inputs)</span><br><span class="line">         <span class="comment">#calculate signals into final output layer</span></span><br><span class="line">        final_inputs = numpy.dot(self.who , hidden_outputs)</span><br><span class="line">        <span class="comment">#calculate the signals emerging from final output layer</span></span><br><span class="line">        final_outputs = self.activation_function(final_inputs)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#error is the (target -actual),即为反向传播的误差</span></span><br><span class="line">        output_errors = targets - final_outputs</span><br><span class="line">        <span class="comment">#hidden layer error is the output_errors , split by weights,recombined at hodden nodes</span></span><br><span class="line">        hidden_errors = numpy.dot(self.who.T , output_errors)</span><br><span class="line">        <span class="comment">#update the weights for the links between the hidden and output layers</span></span><br><span class="line">        <span class="comment">#其中，学习率是self.lr  利用numpy.dot进行矩阵的乘法</span></span><br><span class="line">        self.who += self.lr * numpy.dot((output_errors * final_outputs * (<span class="number">1.0</span> - final_outputs)), numpy.transpose(hidden_outputs))</span><br><span class="line">        <span class="comment">#update the weights for the links between the intput and hidden layers</span></span><br><span class="line">        self.wih += self.lr * numpy.dot((hidden_errors * hidden_outputs * (<span class="number">1.0</span> - hidden_outputs)), numpy.transpose(inputs))</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#query the neural network</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">query</span><span class="params">(self, inputs_list)</span>:</span></span><br><span class="line">        <span class="comment">#convert inouts list to 2d array</span></span><br><span class="line">        inputs = numpy.array(inputs_list,ndmin= <span class="number">2</span> ) .T</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#calculate signals into hidden layer</span></span><br><span class="line">        hidden_inputs = numpy.dot(self.wih , inputs)</span><br><span class="line">        <span class="comment">#calculate the signals emerging from hidden layer</span></span><br><span class="line">        hidden_outputs = self.activation_function(hidden_inputs)</span><br><span class="line">        <span class="comment">#calculate signals into final output layer</span></span><br><span class="line">        final_inputs = numpy.dot(self.who , hidden_outputs)</span><br><span class="line">        <span class="comment">#calculate the signals emerging from final output layer</span></span><br><span class="line">        final_outputs = self.activation_function(final_inputs)</span><br><span class="line">        <span class="keyword">return</span> final_outputs</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#number of input, hidden and output nodes</span></span><br><span class="line">input_nodes = <span class="number">784</span></span><br><span class="line">hidden_nodes = <span class="number">100</span></span><br><span class="line">output_nodes = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#learn rate is 0.3</span></span><br><span class="line">learning_rate = <span class="number">0.3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#create instance of neural network</span></span><br><span class="line">n = neuralNetwork(input_nodes, hidden_nodes, output_nodes, learning_rate)</span><br><span class="line"><span class="comment">#load the mnist training data CSV file into a list</span></span><br><span class="line">training_data_file = open(<span class="string">"TestandTrain/mnist_train_100.csv"</span>,<span class="string">'r'</span>)</span><br><span class="line">training_data_list = training_data_file.readlines()</span><br><span class="line">training_data_file.close()</span><br><span class="line"><span class="comment"># train the neural network</span></span><br><span class="line"><span class="comment"># go through all records in the training data set </span></span><br><span class="line"><span class="keyword">for</span> record <span class="keyword">in</span> training_data_list:</span><br><span class="line">    <span class="comment"># split the record by the ',' commas</span></span><br><span class="line">    all_values = record.split(<span class="string">','</span>)</span><br><span class="line">    <span class="comment"># scale and shift the inputs</span></span><br><span class="line">    inputs = (numpy.asfarray(all_values[<span class="number">1</span>:]) / <span class="number">255.0</span> * <span class="number">0.99</span>) + <span class="number">0.01</span></span><br><span class="line">    targets = numpy.zeros(output_nodes) + <span class="number">0.01</span></span><br><span class="line">    <span class="comment"># all_values[0] is the target label for this record</span></span><br><span class="line">    targets[int(all_values[<span class="number">0</span>])] = <span class="number">0.99</span></span><br><span class="line">    n.train(inputs, targets)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    <span class="comment">#load the mnist test data CSV file into a list</span></span><br><span class="line">test_data_file = open(<span class="string">"TestandTrain/mnist_test_10.csv"</span>,<span class="string">'r'</span>)</span><br><span class="line">test_data_list = test_data_file.readlines()</span><br><span class="line">test_data_file.close()</span><br><span class="line"><span class="comment">#get the first test record</span></span><br><span class="line">all_values = test_data_list[<span class="number">2</span>].split(<span class="string">','</span>)</span><br><span class="line"><span class="comment">#print the lable</span></span><br><span class="line"><span class="comment">#打印标签</span></span><br><span class="line">print(<span class="string">'label:'</span>,all_values[<span class="number">0</span>])</span><br><span class="line"><span class="comment">#get the first test record</span></span><br><span class="line">all_values = test_data_list[<span class="number">2</span>].split(<span class="string">','</span>)</span><br><span class="line"><span class="comment">#print the lable</span></span><br><span class="line"><span class="comment">#打印标签</span></span><br><span class="line">print(<span class="string">'label:'</span>,all_values[<span class="number">0</span>])</span><br><span class="line">image_array = numpy.asfarray(all_values[<span class="number">1</span>:]).reshape((<span class="number">28</span>,<span class="number">28</span>))</span><br><span class="line">matplotlib.pyplot.imshow(image_array,cmap=<span class="string">'Greys'</span>,interpolation=<span class="string">'None'</span>)</span><br><span class="line">n.query((numpy.asfarray(all_values[<span class="number">1</span>:])/ <span class="number">255.0</span> * <span class="number">0.99</span>) + <span class="number">0.01</span>)</span><br></pre></td></tr></table></figure><p>记得给代码加上头文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="comment">#scipy.special for the sigmoid function expit()</span></span><br><span class="line"><span class="keyword">import</span> scipy.special</span><br><span class="line"><span class="comment">#添加绘图库</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot</span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> 神经网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 神经网络 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora极简教程</title>
      <link href="/2019/07/27/Typora%E6%9E%81%E7%AE%80%E6%95%99%E7%A8%8B/"/>
      <url>/2019/07/27/Typora%E6%9E%81%E7%AE%80%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>摘要： <strong>Markdown</strong> 是一种<strong>轻量级</strong>标记语言，创始人是<strong>约翰·格鲁伯</strong>（John Gruber）。它允许人们 “使用易读易写的纯文本格式编写文档，然后转换成有效的 HTML 文档。”</p><a id="more"></a><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>Typora官方下载：<a href="https://www.typora.io/#download" target="_blank" rel="noopener">https://www.typora.io/#download</a></p><hr><h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><ul><li>加粗： <code>Ctrl/Cmd + B</code></li><li>标题： <code>Ctrl/Cmd + H</code></li><li>插入链接： <code>Ctrl/Cmd + K</code></li><li>插入代码： <code>Ctrl/Cmd + Shift + C</code></li><li>行内代码： <code>Ctrl/Cmd + Shift + K</code></li><li>插入图片： <code>Ctrl/Cmd + Shift + I</code></li><li>无序列表： <code>Ctrl/Cmd + Shift + L</code></li><li>撤销： <code>Ctrl/Cmd + Z</code></li><li>一级标题：快捷键为<code>Ctrl + 1</code>，以此类推</li></ul><hr><h2 id="引用文字"><a href="#引用文字" class="headerlink" title="引用文字"></a>引用文字</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; + 空格 + 引用文字</span></span><br><span class="line"><span class="quote">&gt; 引用内容1</span></span><br><span class="line"><span class="quote">&gt; 引用内容2</span></span><br><span class="line">&gt;&gt; 引用内容3</span><br></pre></td></tr></table></figure><blockquote><p>引用内容1<br>引用内容2</p><blockquote><p>引用内容3</p></blockquote></blockquote><hr><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>输入  <em>列表内容 将创建一个无序列表，该</em>符号可以替换为+或-。</p><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>无序列表1</span><br><span class="line"><span class="bullet">+ </span>无序列表2</span><br><span class="line"><span class="bullet">- </span>无序列表3</span><br></pre></td></tr></table></figure><ul><li>无序列表1</li></ul><ul><li>无序列表2</li></ul><ul><li>无序列表3</li></ul><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>有序列表1</span><br><span class="line"><span class="bullet">2. </span>有序列表2</span><br><span class="line"><span class="bullet">3. </span>有序列表3</span><br></pre></td></tr></table></figure><ol><li>有序列表1</li><li>有序列表2</li><li>有序列表3</li></ol><h3 id="多行无序列表"><a href="#多行无序列表" class="headerlink" title="多行无序列表"></a>多行无序列表</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>多行无序列表1</span><br><span class="line">TAB * 多行无序列表2</span><br><span class="line">TAB TAB * 多行无序列表3</span><br></pre></td></tr></table></figure><ul><li>多行无序列表1<ul><li>多行无序列表2<ul><li>多行无序列表3</li></ul></li></ul></li></ul><h3 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-[ ] 不抽烟</span><br><span class="line">-[x] 不喝酒</span><br><span class="line">-[ ] 不烫头</span><br></pre></td></tr></table></figure><p>-[ ] 不抽烟<br>-[x] 不喝酒<br>-[ ] 不烫头</p><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">|姓名|性别|年龄|手机号|</span><br><span class="line">|:---|:--:|:--:|---:|</span><br><span class="line">|居左|居中|居中|居右|</span><br><span class="line">|张三|男|21|18975346876|</span><br><span class="line">|李四|女|23|17789548964|</span><br><span class="line">|王五|男|25|15876513546|</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">姓名</th><th align="center">性别</th><th align="center">年龄</th><th align="right">手机号</th></tr></thead><tbody><tr><td align="left">居左</td><td align="center">居中</td><td align="center">居中</td><td align="right">居右</td></tr><tr><td align="left">张三</td><td align="center">男</td><td align="center">21</td><td align="right">18975346876</td></tr><tr><td align="left">李四</td><td align="center">女</td><td align="center">23</td><td align="right">17789548964</td></tr><tr><td align="left">王五</td><td align="center">男</td><td align="center">25</td><td align="right">15876513546</td></tr></tbody></table><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><h4 id="本地图片"><a href="#本地图片" class="headerlink" title="本地图片"></a>本地图片</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[图片上传失败...(image-61fd19-1520850984854)]</span><br></pre></td></tr></table></figure><h4 id="网络图片"><a href="#网络图片" class="headerlink" title="网络图片"></a>网络图片</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">pikachu.jpg</span>](<span class="link">https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1564157419510&amp;di=e96d9359d9cba4b936ed55eb804c54bb&amp;imgtype=0&amp;src=http%3A%2F%2Fdata.whicdn.com%2Fimages%2F3045613%2Flarge.jpg</span>)</span><br></pre></td></tr></table></figure><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1564157419510&di=e96d9359d9cba4b936ed55eb804c54bb&imgtype=0&src=http%3A%2F%2Fdata.whicdn.com%2Fimages%2F3045613%2Flarge.jpg" alt="pikachu.jpg"></p><h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><h4 id="行内式链接"><a href="#行内式链接" class="headerlink" title="行内式链接"></a>行内式链接</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">我的博客</span>][<span class="symbol">https://hongcyu.github.io</span>]</span><br></pre></td></tr></table></figure><p>[我的博客][<a href="https://hongcyu.github.io]" target="_blank" rel="noopener">https://hongcyu.github.io]</a></p><h4 id="参考式链接"><a href="#参考式链接" class="headerlink" title="参考式链接"></a>参考式链接</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">CSDN</span>][<span class="symbol">CSDN网址</span>]</span><br><span class="line">[<span class="symbol">CSDN网址</span>]:<span class="link">https://www.csdn.net/</span></span><br></pre></td></tr></table></figure><p><a href="https://www.csdn.net/" target="_blank" rel="noopener">CSDN</a></p><h4 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;https://www.github.com&gt;</span><br><span class="line">或</span><br><span class="line">https://www.github.com</span><br></pre></td></tr></table></figure><p><a href="https://www.github.com" target="_blank" rel="noopener">https://www.github.com</a></p><p><a href="https://www.github.com" target="_blank" rel="noopener">https://www.github.com</a></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">*斜体*</span></span><br><span class="line"><span class="emphasis">_斜体_</span></span><br></pre></td></tr></table></figure><p><em>斜体</em><br><em>斜体</em></p><h3 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**加粗**</span></span><br><span class="line"><span class="strong">__加粗__</span></span><br></pre></td></tr></table></figure><p><strong>加粗</strong><br><strong>加粗</strong></p><h3 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;u&gt;下划线&lt;/u&gt;</span><br></pre></td></tr></table></figure><p><u>下划线</u></p><h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~删除线~~</span><br></pre></td></tr></table></figure><p><del>删除线</del></p><h3 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">***</span><br><span class="line">---</span><br><span class="line">___</span><br></pre></td></tr></table></figure><hr><hr><hr><h3 id="注脚"><a href="#注脚" class="headerlink" title="注脚"></a>注脚</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Typora[^1]</span><br><span class="line">[^1]A markdown editor</span><br></pre></td></tr></table></figure><p>Typora[^1]<br>[^1]A markdown editor</p><h3 id="符号的输入"><a href="#符号的输入" class="headerlink" title="符号的输入"></a>符号的输入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">\\   反斜线</span><br><span class="line">\`   反引号</span><br><span class="line">\*   星号</span><br><span class="line">\_   底线</span><br><span class="line">\&#123; \&#125;  花括号</span><br><span class="line">\[ \]  方括号</span><br><span class="line">\( \)  括弧</span><br><span class="line">\#   井字号</span><br><span class="line">\+   加号</span><br><span class="line">\-   减号</span><br><span class="line">\.   英文句点</span><br><span class="line">\!   惊叹号</span><br></pre></td></tr></table></figure><p>\   反斜线<br>`   反引号<br>*   星号<br>_   底线<br>{ }  花括号<br>[ ]  方括号<br>( )  括弧<br>#   井字号<br>+   加号<br>-   减号<br>.   英文句点<br>!   惊叹号</p><h3 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&amp;copy;      版权      </span><br><span class="line">&amp;reg;       注册商标</span><br><span class="line">&amp;trade;     商标</span><br><span class="line">&amp;nbsp;      空格</span><br><span class="line">&amp;amp;       和号</span><br><span class="line">&amp;quot;      引号</span><br><span class="line">&amp;apos;      撇号</span><br><span class="line">&amp;lt;        小于号</span><br><span class="line">&amp;gt;        大于号</span><br><span class="line">&amp;ne;        不等号</span><br><span class="line">&amp;le;        小于等于</span><br><span class="line">&amp;ge;        大于等于</span><br><span class="line">&amp;cent;      分</span><br><span class="line">&amp;pound;     磅</span><br><span class="line">&amp;euro;      欧元</span><br><span class="line">&amp;yen;       元</span><br><span class="line">&amp;sect;      节</span><br><span class="line">&amp;times;     乘号</span><br><span class="line">&amp;divide;    除号</span><br><span class="line">&amp;plusmn;    正负号</span><br></pre></td></tr></table></figure><p>&copy;      版权<br>&reg;       注册商标<br>&trade;     商标<br>&nbsp;      空格<br>&amp;       和号<br>&quot;      引号<br>&apos;      撇号<br>&lt;        小于号<br>&gt;        大于号<br>&ne;        不等号<br>&le;        小于等于<br>&ge;        大于等于<br>&cent;      分<br>&pound;     磅<br>&euro;      欧元<br>&yen;       元<br>&sect;      节<br>&times;     乘号<br>&divide;    除号<br>&plusmn;    正负号</p><p>附件：[HTML特殊字符编码对照表][<a href="https://www.jb51.net/onlineread/htmlchar.htm]" target="_blank" rel="noopener">https://www.jb51.net/onlineread/htmlchar.htm]</a></p><h2 id="插入音乐和视频"><a href="#插入音乐和视频" class="headerlink" title="插入音乐和视频"></a>插入音乐和视频</h2><h3 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h3><p>1）直接用 HTML 的标签，写法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;audio src=&quot;https://什么什么什么.mp3&quot; style=&quot;max-height :100%; max-width: 100%; display: block; margin-left: auto; margin-right: auto;&quot; controls=&quot;controls&quot; loop=&quot;loop&quot; preload=&quot;meta&quot;&gt;Your browser does not support the audio tag.&lt;/audio&gt;</span><br></pre></td></tr></table></figure><p>2）用插件，有显示歌词功能，也美观。首先在<strong>站点</strong>文件夹根目录安装插件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-tag-aplayer --save</span><br></pre></td></tr></table></figure><p>然后文章中的写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% aplayer &quot;歌曲名&quot; &quot;歌手名&quot; &quot;https://什么什么什么.mp3&quot; &quot;https://封面图.jpg&quot; &quot;lrc:https://歌词.lrc&quot; %&#125;</span><br></pre></td></tr></table></figure><p>另外可以支持歌单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;% aplayerlist %&#125;</span><br><span class="line">&#123;</span><br><span class="line">    &quot;autoplay&quot;: false,</span><br><span class="line">    &quot;showlrc&quot;: 3,</span><br><span class="line">    &quot;mutex&quot;: true,</span><br><span class="line">    &quot;music&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;title&quot;: &quot;歌曲名&quot;,</span><br><span class="line">            &quot;author&quot;: &quot;歌手名&quot;,</span><br><span class="line">            &quot;url&quot;: &quot;https://什么什么什么.mp3&quot;,</span><br><span class="line">            &quot;pic&quot;: &quot;https://封面图.jpg&quot;,</span><br><span class="line">            &quot;lrc&quot;: &quot;https://歌词.lrc&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;title&quot;: &quot;歌曲名&quot;,</span><br><span class="line">            &quot;author&quot;: &quot;歌手名&quot;,</span><br><span class="line">            &quot;url&quot;: &quot;https://什么什么什么.mp3&quot;,</span><br><span class="line">            &quot;pic&quot;: &quot;https://封面图.jpg&quot;,</span><br><span class="line">            &quot;lrc&quot;: &quot;https://歌词.lrc&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">&#123;% endaplayerlist %&#125;</span><br></pre></td></tr></table></figure><p>里面的详细参数见 <a href="https://github.com/MoePlayer/hexo-tag-aplayer" target="_blank" rel="noopener">README</a> 和这插件的「母亲」Aplayer 的<a href="https://aplayer.js.org/" target="_blank" rel="noopener">官方文档</a>。关于 <a href="https://baike.baidu.com/item/lrc/46935" target="_blank" rel="noopener">LRC</a>歌词，可以用<a href="https://www.zhihu.com/question/27638171" target="_blank" rel="noopener">工具</a>下载网易云音乐的歌词，另发现暂时不支持<code>offset</code>参数。当然，如果那歌词很操蛋，有错误（比如字母大小写和标点符号乱加）或者时间完全对不上，然后你也和我一样是个完美主义者，那接下来就是令人窒息的操作了，一句一句自己查看修改……</p><p>什么，你想把网易云的几百首歌手动同步到博客？慢慢慢，有一种<a href="https://github.com/MoePlayer/hexo-tag-aplayer#meingjs-support-new-in-30" target="_blank" rel="noopener">非常简单的方法</a>，此这种方法也支持单曲，将参数里的<code>playlist</code>更改为<code>song</code>即可，非常建议食用！更多功能请仔细阅读 README。</p><h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h3><p>1）直接用 HTML 的标签，写法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;video poster=&quot;https://封面图.jpg&quot; src=&quot;https://什么什么什么.mp4&quot; style=&quot;max-height :100%; max-width: 100%; display: block; margin-left: auto; margin-right: auto;&quot; controls=&quot;controls&quot; loop=&quot;loop&quot; preload=&quot;meta&quot;&gt;Your browser does not support the video tag.&lt;/video&gt;</span><br></pre></td></tr></table></figure><p>2）用插件，可支持弹幕，首先在站点文件夹根目录安装插件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-tag-dplayer --save</span><br></pre></td></tr></table></figure><p>然后文章中的写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% dplayer &quot;url=https://什么什么什么.mp4&quot; &quot;https://封面图.jpg&quot; &quot;api=https://api.prprpr.me/dplayer/&quot; &quot;id=&quot; &quot;loop=false&quot; %&#125;</span><br></pre></td></tr></table></figure><p>要使用弹幕，必须有<code>api</code>和<code>id</code>两项，并且若使用的是官方的 api 地址（即上面的），id 的值不能与<a href="https://api.prprpr.me/dplayer/list" target="_blank" rel="noopener">这个列表</a>的值一样。id 的值自己随便取，唯一要求就是前面这点。如果唯一要求难倒了你，可以使用<a href="http://tool.oschina.net/encrypt?type=2" target="_blank" rel="noopener">这个工具</a>将一段与众不同的文字生成一段看起来毫无意义的哈希值，这样看起来是不是好多了。</p><p>当然，这个插件的功能还有很多，可以去 <a href="https://github.com/MoePlayer/hexo-tag-dplayer" target="_blank" rel="noopener">README</a> 和这插件的「母亲」Dplayer 的<a href="https://dplayer.js.org/" target="_blank" rel="noopener">官方文档</a>看看。</p>]]></content>
      
      
      <categories>
          
          <category> 书写格式 </category>
          
          <category> Typora </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo的简单命令</title>
      <link href="/2019/07/25/Hexo%E7%9A%84%E7%AE%80%E5%8D%95%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/07/25/Hexo%E7%9A%84%E7%AE%80%E5%8D%95%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>摘要：介绍了Hexo的一些简单命令。</p><a id="more"></a><h2 id="hexo-s"><a href="#hexo-s" class="headerlink" title="hexo s"></a>hexo s</h2><p>启动本地服务器，用于预览主题。默认地址： <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a><br>hexo s 是 hexo server 的缩写，命令效果一致；<br>预览的同时可以修改文章内容或主题代码，保存后刷新页面即可；<br>对 Hexo 根目录 _config.yml 的修改，需要重启本地服务器后才能预览效果。</p><hr><h2 id="hexo-new-“学习笔记”"><a href="#hexo-new-“学习笔记”" class="headerlink" title="hexo new “学习笔记”"></a>hexo new “学习笔记”</h2><p>新建一篇标题为 学习笔记 的文章，因为标题里有空格，所以加上了引号。<br>文章标题可以在对应 md 文件里改，新建时标题可以写的简单些。</p><hr><h2 id="hexo-d"><a href="#hexo-d" class="headerlink" title="hexo d"></a>hexo d</h2><p>自动生成网站静态文件，并部署到设定的仓库。<br>hexo d 是 hexo deploy 的缩写，命令效果一致。</p><hr><h2 id="hexo-clean"><a href="#hexo-clean" class="headerlink" title="hexo clean"></a>hexo clean</h2><p>清除缓存文件 db.json 和已生成的静态文件 public 。<br>网站显示异常时可以执行这条命令试试。</p><hr><h2 id="hexo-g"><a href="#hexo-g" class="headerlink" title="hexo g"></a>hexo g</h2><p>生成网站静态文件到默认设置的 public 文件夹。<br>便于查看网站生成的静态文件或者手动部署网站；<br>如果使用自动部署，不需要先执行该命令；<br>hexo g 是 hexo generate 的缩写，命令效果一致。</p><hr><h2 id="hexo-new-page-aboutme"><a href="#hexo-new-page-aboutme" class="headerlink" title="hexo new page aboutme"></a>hexo new page aboutme</h2><p>新建一个标题为 aboutme 的页面，默认链接地址为 主页地址/aboutme/<br>标题可以为中文，但一般习惯用英文；<br>页面标题和文章一样可以随意修改；<br>页面不会出现在首页文章列表和归档中，也不支持设置分类和标签。</p><hr><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://www.bilibili.com/video/av44544186" target="_blank" rel="noopener">https://www.bilibili.com/video/av44544186</a><br><a href="https://blog.csdn.net/dxxzst/article/details/76135935" target="_blank" rel="noopener">https://blog.csdn.net/dxxzst/article/details/76135935</a></p>]]></content>
      
      
      <categories>
          
          <category> 命令格式 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
